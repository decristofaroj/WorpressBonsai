// START bonsai-all-files

.
├── .gitignore
├── AGENT.md
├── README.md
└── wp-plugin-bonsai
    ├── .eslintrc.json
    ├── README.md
    ├── index.html
    ├── package-lock.json
    ├── package.json
    ├── public
    │   └── metadata.json
    ├── src
    │   ├── App.tsx
    │   ├── components
    │   │   ├── ApiKeyManager.tsx
    │   │   ├── CodeResultViewer.tsx
    │   │   ├── ConfirmationModal.tsx
    │   │   ├── EmptyState.tsx
    │   │   ├── FileEditor.tsx
    │   │   ├── Footer.tsx
    │   │   ├── Header.tsx
    │   │   ├── HistoryControls.tsx
    │   │   ├── IntegrationBuilder.tsx
    │   │   ├── Loader.tsx
    │   │   ├── ModeSwitcher.tsx
    │   │   ├── ModelSelector.tsx
    │   │   ├── MultiPluginUploader.tsx
    │   │   ├── PluginBuilder.tsx
    │   │   ├── PluginPackager.tsx
    │   │   ├── ReviewResults.tsx
    │   │   ├── WorkspaceManager.tsx
    │   │   └── icons
    │   │       ├── CategoryIcons.tsx
    │   │       ├── FileIcons.tsx
    │   │       └── SeverityIcons.tsx
    │   ├── config
    │   │   ├── models.ts
    │   │   └── schemas.ts
    │   ├── data
    │   │   └── wordpress.ts
    │   ├── hooks
    │   │   └── useOnlineStatus.ts
    │   ├── index.css
    │   ├── index.tsx
    │   ├── services
    │   │   ├── aiService.ts
    │   │   ├── anthropicService.ts
    │   │   ├── geminiService.ts
    │   │   ├── localAnalysisService.ts
    │   │   ├── localCodePatcher.ts
    │   │   ├── localPluginPackager.ts
    │   │   ├── openaiService.ts
    │   │   ├── prompts.ts
    │   │   └── storageService.ts
    │   └── types.ts
    ├── test
    │   ├── localAnalysisService.test.ts
    │   └── localCodePatcher.test.ts
    ├── tsconfig.json
    ├── tsconfig.node.json
    └── vite.config.ts

11 directories, 51 files

# START .gitignore
node_modules/
dist/
.env
npm-debug.log

# END .gitignore

<!-- START ./AGENT.md -->
# Agent Guidelines

- All source code lives in `wp-plugin-bonsai/src`.
- Run `npm test`, `npm run lint`, and `npm run build` inside `wp-plugin-bonsai` before committing changes.
- Use the `@/` path alias for imports within the `src` directory.
<!-- END ./AGENT.md -->

<!-- START README.md -->
# File Structure

```
.
├── .gitignore
├── AGENT.md
├── README.md
└── wp-plugin-bonsai
    ├── .eslintrc.json
    ├── README.md
    ├── index.html
    ├── package-lock.json
    ├── package.json
    ├── public
    │   └── metadata.json
    ├── src
    │   ├── App.tsx
    │   ├── components
    │   │   ├── ApiKeyManager.tsx
    │   │   ├── CodeResultViewer.tsx
    │   │   ├── ConfirmationModal.tsx
    │   │   ├── EmptyState.tsx
    │   │   ├── FileEditor.tsx
    │   │   ├── Footer.tsx
    │   │   ├── Header.tsx
    │   │   ├── HistoryControls.tsx
    │   │   ├── IntegrationBuilder.tsx
    │   │   ├── Loader.tsx
    │   │   ├── ModeSwitcher.tsx
    │   │   ├── ModelSelector.tsx
    │   │   ├── MultiPluginUploader.tsx
    │   │   ├── PluginBuilder.tsx
    │   │   ├── PluginPackager.tsx
    │   │   ├── ReviewResults.tsx
    │   │   ├── WorkspaceManager.tsx
    │   │   └── icons
    │   │       ├── CategoryIcons.tsx
    │   │       ├── FileIcons.tsx
    │   │       └── SeverityIcons.tsx
    │   ├── config
    │   │   ├── models.ts
    │   │   └── schemas.ts
    │   ├── data
    │   │   └── wordpress.ts
    │   ├── hooks
    │   │   └── useOnlineStatus.ts
    │   ├── index.css
    │   ├── index.tsx
    │   ├── services
    │   │   ├── aiService.ts
    │   │   ├── anthropicService.ts
    │   │   ├── geminiService.ts
    │   │   ├── localAnalysisService.ts
    │   │   ├── localCodePatcher.ts
    │   │   ├── localPluginPackager.ts
    │   │   ├── openaiService.ts
    │   │   ├── prompts.ts
    │   │   └── storageService.ts
    │   └── types.ts
    ├── test
    │   ├── localAnalysisService.test.ts
    │   └── localCodePatcher.test.ts
    ├── tsconfig.json
    ├── tsconfig.node.json
    └── vite.config.ts

11 directories, 51 files
```
<!-- END README.md -->

// START ./wp-plugin-bonsai/.eslintrc.json
{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint", "react-hooks"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended"
  ],
  "rules": {
    "@typescript-eslint/no-explicit-any": "off"
  }
}
// END ./wp-plugin-bonsai/.eslintrc.json

<!-- START ./wp-plugin-bonsai/README.md -->
# WP Plugin Bonsai: Easy Install Guide (After Download)

Hello! You've made the smart choice to download the project directly. This guide is super simple and will get you running in just a few minutes.

We'll be setting this up on **Windows 11**.

---

### **Part 1: Your Tools (If you don't have them yet)**

Before we start, you need two free tools. If you already have them from the last guide, you can skip this!

**Tool #1: Node.js (The Engine)**
*   Go to the official Node.js website: [https://nodejs.org/](https://nodejs.org/)
*   Click the button that says **LTS** and install it like any other program.

**Tool #2: Visual Studio Code (The Super-Smart Notepad)**
*   Go to the Visual Studio Code website: [https://code.visualstudio.com/](https://code.visualstudio.com/)
*   Click the big blue button to download and install it. During setup, make sure to check the boxes for **"Add 'Open with Code' action..."**.

---

### **Part 2: Your Project Folder**

You've already done the hardest part by downloading and unzipping the project!

1.  Find the `wp-plugin-bonsai` folder that you unzipped (you probably put it on your Desktop).
2.  Right-click on that folder and choose **Open with Code**. This will open your entire project in our super-smart notepad!

---

### **Part 3: Turning on the "Electricity" (API Keys)**

This is the most important step. We need to tell the app the secret passwords for the AIs.

1.  **Get Your Keys:** If you haven't already, get your free API keys.
    *   **Google Gemini:** [https://aistudio.google.com/app/apikey](https://aistudio.google.com/app/apikey)
    *   **OpenAI (ChatGPT):** [https://platform.openai.com/api-keys](https://platform.openai.com/api-keys)
    *   **Anthropic (Claude):** [https://console.anthropic.com/settings/keys](https://console.anthropic.com/settings/keys)
    *   Copy each secret key you create and paste them into a temporary Notepad file.

2.  **Create the Secret File:** In the VS Code file explorer on the left, right-click in an empty space at the very bottom (NOT inside any other folder) and choose **New File...**. Name the file exactly:
    `.env`

3.  **Add Your Keys:** Open the new `.env` file and paste the following. Now, take the secret keys you saved in Notepad and paste them in place of the `YOUR_..._HERE` text.

    ```
    # Google Gemini API Key
    VITE_GEMINI_API_KEY=YOUR_GEMINI_API_KEY_HERE

    # OpenAI (ChatGPT) API Key
    VITE_OPENAI_API_KEY=YOUR_OPENAI_API_KEY_HERE

    # Anthropic (Claude) API Key
    VITE_ANTHROPIC_API_KEY=YOUR_ANTHROPIC_API_KEY_HERE
    ```
4.  Press `Ctrl+S` to save the file!

---

### **Part 4: Starting Your App!**

You're at the final step!

1.  **Open the Terminal:** Inside VS Code, look at the menu at the top of the screen. Click **Terminal > New Terminal**. A little command window will open at the bottom.
2.  **Download the Building Blocks:** Copy and paste this command into the terminal and press **Enter**. This downloads all the code libraries the app needs. It might take a minute.

    ```bash
    npm install
    ```

3.  **Flip the ON Switch:** Now, run the final command:

    ```bash
    npm run dev
    ```

The terminal will show you a message with a local URL, probably `http://localhost:5173`.

**Congratulations!** Open your web browser (like Chrome or Edge) and go to that `http://localhost:5173` address. Your very own WP Plugin Bonsai is now running on your computer!
<!-- END ./wp-plugin-bonsai/README.md -->

<!-- START ./wp-plugin-bonsai/index.html -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WP Plugin Bonsai</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script type="importmap">
{
  "imports": {
    "react": "https://aistudiocdn.com/react@^18.2.0",
    "react-dom/": "https://aistudiocdn.com/react-dom@^18.2.0/",
    "react/": "https://aistudiocdn.com/react@^18.2.0/",
    "jszip": "https://aistudiocdn.com/jszip@^3.10.1",
    "@google/genai": "https://aistudiocdn.com/@google/genai@^0.15.0",
    "vite": "https://aistudiocdn.com/vite@^7.1.3",
    "@vitejs/plugin-react": "https://aistudiocdn.com/@vitejs/plugin-react@^5.0.1",
    "openai": "https://aistudiocdn.com/openai@^5.15.0",
    "@anthropic-ai/sdk": "https://aistudiocdn.com/@anthropic-ai/sdk@^0.60.0",
    "jspdf": "https://aistudiocdn.com/jspdf@^3.0.1",
    "php-parser": "https://aistudiocdn.com/php-parser@^3.2.5",
    "idb-keyval": "https://aistudiocdn.com/idb-keyval@^6.2.2",
    "path": "https://aistudiocdn.com/path@^0.12.7",
    "process": "https://aistudiocdn.com/process@^0.11.10",
    "url": "https://aistudiocdn.com/url@^0.11.4"
  }
}
    </script>
</head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
  </body>
</html>
<!-- END ./wp-plugin-bonsai/index.html -->

// START ./wp-plugin-bonsai/package-lock.json
{
  "name": "wp-plugin-bonsai",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "wp-plugin-bonsai",
      "version": "1.0.0",
      "dependencies": {
        "@anthropic-ai/sdk": "^0.22.0",
        "@google/genai": "^1.15.0",
        "idb-keyval": "^6.2.1",
        "jspdf": "^2.5.1",
        "jszip": "^3.10.1",
        "openai": "^4.53.2",
        "php-parser": "^3.1.5",
        "react": "^18.2.0",
        "react-dom": "^18.2.0"
      },
      "devDependencies": {
        "@types/node": "^20.14.2",
        "@types/react": "^18.2.66",
        "@types/react-dom": "^18.2.22",
        "@typescript-eslint/eslint-plugin": "^7.2.0",
        "@typescript-eslint/parser": "^7.2.0",
        "@vitejs/plugin-react": "^4.2.1",
        "eslint": "^8.57.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.6",
        "typescript": "^5.2.2",
        "vite": "^5.2.0",
        "vitest": "^1.6.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@anthropic-ai/sdk": {
      "version": "0.22.0",
      "resolved": "https://registry.npmjs.org/@anthropic-ai/sdk/-/sdk-0.22.0.tgz",
      "integrity": "sha512-dv4BCC6FZJw3w66WNLsHlUFjhu19fS1L/5jMPApwhZLa/Oy1j0A2i3RypmDtHEPp4Wwg3aZkSHksp7VzYWjzmw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
        "agentkeepalive": "^4.2.1",
        "form-data-encoder": "1.7.2",
        "formdata-node": "^4.3.2",
        "node-fetch": "^2.6.7",
        "web-streams-polyfill": "^3.2.1"
      }
    },
    "node_modules/@anthropic-ai/sdk/node_modules/@types/node": {
      "version": "18.19.123",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.123.tgz",
      "integrity": "sha512-K7DIaHnh0mzVxreCR9qwgNxp3MH9dltPNIEddW9MYUlcKAzm+3grKNSTe2vCJHI1FaLpvpL5JGJrz1UZDKYvDg==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/@anthropic-ai/sdk/node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
      "license": "MIT"
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.3.tgz",
      "integrity": "sha512-yDBHV9kQNcr2/sUr9jghVyz9C3Y5G2zUM2H2lo+9mKv4sFgbA8s8Z9t8D1jiTkGoO/NoIfKMyKWr4s6CN23ZwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.3",
        "@babel/parser": "^7.28.3",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.3",
        "@babel/types": "^7.28.2",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.3.tgz",
      "integrity": "sha512-PTNtvUQihsAsDHMOP5pfobP8C6CM4JWXmP8DrEIt46c3r2bf87Ua1zoqevsMo9g+tWDwgWrFP5EIxuBx5RudAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.3.tgz",
      "integrity": "sha512-7+Ey1mAgYqFAx2h0RuoxcQT5+MlG3GTV0TQrgr7/ZliKsm/MNDxVVutlWaziMq7wJNAz8MTqz55XLpWvva6StA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.3.tgz",
      "integrity": "sha512-9uIQ10o0WGdpP6GDhXcdOJPJuDgFtIDtN/9+ArJQ2NAfAmiuhTQdzkaTGR33v43GYS2UrSA0eX2pPPHoFVvpxA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.3.tgz",
      "integrity": "sha512-7w4kZYHneL3A6NP2nxzHvT3HCZ7puDZZjFMqDpBPECub79sTtSO5CGXDkKrTQq8ksAwfD/XI2MRFX23njdDaIQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.3",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/@eslint/js": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@google/genai": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/@google/genai/-/genai-1.15.0.tgz",
      "integrity": "sha512-4CSW+hRTESWl3xVtde7pkQ3E+dDFhDq+m4ztmccRctZfx1gKy3v0M9STIMGk6Nq0s6O2uKMXupOZQ1JGorXVwQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "google-auth-library": "^9.14.2",
        "ws": "^8.18.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@modelcontextprotocol/sdk": "^1.11.0"
      },
      "peerDependenciesMeta": {
        "@modelcontextprotocol/sdk": {
          "optional": true
        }
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
      "deprecated": "Use @eslint/config-array instead",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.3",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/config-array/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/@humanwhocodes/config-array/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.30",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.30.tgz",
      "integrity": "sha512-GQ7Nw5G2lTu/BtHTKfXhKHok2WGetd4XYcVKGx00SjAk8GMwgJM3zr6zORiPGuOE+/vkc90KtTosSSvaCjKb2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.48.1.tgz",
      "integrity": "sha512-rGmb8qoG/zdmKoYELCBwu7vt+9HxZ7Koos3pD0+sH5fR3u3Wb/jGcpnqxcnWsPEKDUyzeLSqksN8LJtgXjqBYw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.48.1.tgz",
      "integrity": "sha512-4e9WtTxrk3gu1DFE+imNJr4WsL13nWbD/Y6wQcyku5qadlKHY3OQ3LJ/INrrjngv2BJIHnIzbqMk1GTAC2P8yQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.48.1.tgz",
      "integrity": "sha512-+XjmyChHfc4TSs6WUQGmVf7Hkg8ferMAE2aNYYWjiLzAS/T62uOsdfnqv+GHRjq7rKRnYh4mwWb4Hz7h/alp8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.48.1.tgz",
      "integrity": "sha512-upGEY7Ftw8M6BAJyGwnwMw91rSqXTcOKZnnveKrVWsMTF8/k5mleKSuh7D4v4IV1pLxKAk3Tbs0Lo9qYmii5mQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.48.1.tgz",
      "integrity": "sha512-P9ViWakdoynYFUOZhqq97vBrhuvRLAbN/p2tAVJvhLb8SvN7rbBnJQcBu8e/rQts42pXGLVhfsAP0k9KXWa3nQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.48.1.tgz",
      "integrity": "sha512-VLKIwIpnBya5/saccM8JshpbxfyJt0Dsli0PjXozHwbSVaHTvWXJH1bbCwPXxnMzU4zVEfgD1HpW3VQHomi2AQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.48.1.tgz",
      "integrity": "sha512-3zEuZsXfKaw8n/yF7t8N6NNdhyFw3s8xJTqjbTDXlipwrEHo4GtIKcMJr5Ed29leLpB9AugtAQpAHW0jvtKKaQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.48.1.tgz",
      "integrity": "sha512-leo9tOIlKrcBmmEypzunV/2w946JeLbTdDlwEZ7OnnsUyelZ72NMnT4B2vsikSgwQifjnJUbdXzuW4ToN1wV+Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.48.1.tgz",
      "integrity": "sha512-Vy/WS4z4jEyvnJm+CnPfExIv5sSKqZrUr98h03hpAMbE2aI0aD2wvK6GiSe8Gx2wGp3eD81cYDpLLBqNb2ydwQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.48.1.tgz",
      "integrity": "sha512-x5Kzn7XTwIssU9UYqWDB9VpLpfHYuXw5c6bJr4Mzv9kIv242vmJHbI5PJJEnmBYitUIfoMCODDhR7KoZLot2VQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.48.1.tgz",
      "integrity": "sha512-yzCaBbwkkWt/EcgJOKDUdUpMHjhiZT/eDktOPWvSRpqrVE04p0Nd6EGV4/g7MARXXeOqstflqsKuXVM3H9wOIQ==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.48.1.tgz",
      "integrity": "sha512-UK0WzWUjMAJccHIeOpPhPcKBqax7QFg47hwZTp6kiMhQHeOYJeaMwzeRZe1q5IiTKsaLnHu9s6toSYVUlZ2QtQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.48.1.tgz",
      "integrity": "sha512-3NADEIlt+aCdCbWVZ7D3tBjBX1lHpXxcvrLt/kdXTiBrOds8APTdtk2yRL2GgmnSVeX4YS1JIf0imFujg78vpw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.48.1.tgz",
      "integrity": "sha512-euuwm/QTXAMOcyiFCcrx0/S2jGvFlKJ2Iro8rsmYL53dlblp3LkUQVFzEidHhvIPPvcIsxDhl2wkBE+I6YVGzA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.48.1.tgz",
      "integrity": "sha512-w8mULUjmPdWLJgmTYJx/W6Qhln1a+yqvgwmGXcQl2vFBkWsKGUBRbtLRuKJUln8Uaimf07zgJNxOhHOvjSQmBQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.48.1.tgz",
      "integrity": "sha512-90taWXCWxTbClWuMZD0DKYohY1EovA+W5iytpE89oUPmT5O1HFdf8cuuVIylE6vCbrGdIGv85lVRzTcpTRZ+kA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.48.1.tgz",
      "integrity": "sha512-2Gu29SkFh1FfTRuN1GR1afMuND2GKzlORQUP3mNMJbqdndOg7gNsa81JnORctazHRokiDzQ5+MLE5XYmZW5VWg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.48.1.tgz",
      "integrity": "sha512-6kQFR1WuAO50bxkIlAVeIYsz3RUx+xymwhTo9j94dJ+kmHe9ly7muH23sdfWduD0BA8pD9/yhonUvAjxGh34jQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.48.1.tgz",
      "integrity": "sha512-RUyZZ/mga88lMI3RlXFs4WQ7n3VyU07sPXmMG7/C1NOi8qisUg57Y7LRarqoGoAiopmGmChUhSwfpvQ3H5iGSQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.48.1.tgz",
      "integrity": "sha512-8a/caCUN4vkTChxkaIJcMtwIVcBhi4X2PQRoT+yCK3qRYaZ7cURrmJFL5Ux9H9RaMIXj9RuihckdmkBX3zZsgg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "20.19.11",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.11.tgz",
      "integrity": "sha512-uug3FEEGv0r+jrecvUUpbY8lLisvIjg6AAic6a2bSP5OEOLeJsDSnvhCDov7ipFFMXS3orMpzlmi0ZcuGkBbow==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.13",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.13.tgz",
      "integrity": "sha512-QGpRVpzSaUs30JBSGPjOg4Uveu384erbHBoT1zeONvyCfwQxIkUshLAOqN/k9EjGviPRmWTTe6aH2qySWKTVSw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "form-data": "^4.0.4"
      }
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.15",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/raf": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/@types/raf/-/raf-3.4.3.tgz",
      "integrity": "sha512-c4YAvMedbPZ5tEyxzQdMoOhhJ4RD3rngZIdwC2/qDN3d7JpEhB6fiBRKVY1lg5B7Wk+uPBjn5f39j1/2MY1oOw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/react": {
      "version": "18.3.24",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.24.tgz",
      "integrity": "sha512-0dLEBsA1kI3OezMBF8nSsb7Nk19ZnsyE1LLhB8r27KbgU5H4pvuqZLdtE+aUkJVoXgTVuA+iLIwmZ0TuK4tx6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^18.0.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-7.18.0.tgz",
      "integrity": "sha512-94EQTWZ40mzBc42ATNIBimBEDltSJ9RQHCC8vc/PDbxi4k8dVwUAv4o98dk50M1zB+JGFxp43FP7f8+FP8R6Sw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "7.18.0",
        "@typescript-eslint/type-utils": "7.18.0",
        "@typescript-eslint/utils": "7.18.0",
        "@typescript-eslint/visitor-keys": "7.18.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.3.1",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || >=20.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^7.0.0",
        "eslint": "^8.56.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-7.18.0.tgz",
      "integrity": "sha512-4Z+L8I2OqhZV8qA132M4wNL30ypZGYOQVBfMgxDH/K5UX0PNqTu1c6za9ST5r9+tavvHiTWmBnKzpCJ/GlVFtg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/scope-manager": "7.18.0",
        "@typescript-eslint/types": "7.18.0",
        "@typescript-eslint/typescript-estree": "7.18.0",
        "@typescript-eslint/visitor-keys": "7.18.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || >=20.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.56.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-7.18.0.tgz",
      "integrity": "sha512-jjhdIE/FPF2B7Z1uzc6i3oWKbGcHb87Qw7AWj6jmEqNOfDFbJWtjt/XfwCpvNkpGWlcJaog5vTR+VV8+w9JflA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "7.18.0",
        "@typescript-eslint/visitor-keys": "7.18.0"
      },
      "engines": {
        "node": "^18.18.0 || >=20.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-7.18.0.tgz",
      "integrity": "sha512-XL0FJXuCLaDuX2sYqZUUSOJ2sG5/i1AAze+axqmLnSkNEVMVYLF+cbwlB2w8D1tinFuSikHmFta+P+HOofrLeA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/typescript-estree": "7.18.0",
        "@typescript-eslint/utils": "7.18.0",
        "debug": "^4.3.4",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || >=20.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.56.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-7.18.0.tgz",
      "integrity": "sha512-iZqi+Ds1y4EDYUtlOOC+aUmxnE9xS/yCigkjA7XpTKV6nCBd3Hp/PRGGmdwnfkV2ThMyYldP1wRpm/id99spTQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || >=20.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-7.18.0.tgz",
      "integrity": "sha512-aP1v/BSPnnyhMHts8cf1qQ6Q1IFwwRvAQGRvBFkWlo3/lH29OXA3Pts+c10nxRxIBrDnoMqzhgdwVe5f2D6OzA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/types": "7.18.0",
        "@typescript-eslint/visitor-keys": "7.18.0",
        "debug": "^4.3.4",
        "globby": "^11.1.0",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || >=20.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-7.18.0.tgz",
      "integrity": "sha512-kK0/rNa2j74XuHVcoCZxdFBMF+aq/vH83CXAOHieC+2Gis4mF8jJXT5eAfyD3K0sAxtPuwxaIOIOvhwzVDt/kw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.4.0",
        "@typescript-eslint/scope-manager": "7.18.0",
        "@typescript-eslint/types": "7.18.0",
        "@typescript-eslint/typescript-estree": "7.18.0"
      },
      "engines": {
        "node": "^18.18.0 || >=20.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.56.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-7.18.0.tgz",
      "integrity": "sha512-cDF0/Gf81QpY3xYyJKDV14Zwdmid5+uuENhjH2EqFaF0ni+yAyq/LzMaIJdhNJXZI7uLzwIlA+V7oWoyn6Curg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "7.18.0",
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^18.18.0 || >=20.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/@vitest/expect": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-1.6.1.tgz",
      "integrity": "sha512-jXL+9+ZNIJKruofqXuuTClf44eSpcHlgj3CiuNihUF3Ioujtmc0zIa3UJOW5RjDK1YLBJZnWBlPuqhYycLioog==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/spy": "1.6.1",
        "@vitest/utils": "1.6.1",
        "chai": "^4.3.10"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/runner": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-1.6.1.tgz",
      "integrity": "sha512-3nSnYXkVkf3mXFfE7vVyPmi3Sazhb/2cfZGGs0JRzFsPFvAMBEcrweV1V1GsrstdXeKCTXlJbvnQwGWgEIHmOA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/utils": "1.6.1",
        "p-limit": "^5.0.0",
        "pathe": "^1.1.1"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/runner/node_modules/p-limit": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-5.0.0.tgz",
      "integrity": "sha512-/Eaoq+QyLSiXQ4lyYV23f14mZRQcXnxfHrN0vCai+ak9G0pp9iEQukIIZq5NccEvwRB8PUnZT0KsOoDCINS1qQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^1.0.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@vitest/runner/node_modules/yocto-queue": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.2.1.tgz",
      "integrity": "sha512-AyeEbWOu/TAXdxlV9wmGcR0+yh2j3vYPGOECcIj2S7MkrLyC7ne+oye2BKTItt0ii2PHk4cDy+95+LshzbXnGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@vitest/snapshot": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-1.6.1.tgz",
      "integrity": "sha512-WvidQuWAzU2p95u8GAKlRMqMyN1yOJkGHnx3M1PL9Raf7AQ1kwLKg04ADlCa3+OXUZE7BceOhVZiuWAbzCKcUQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "magic-string": "^0.30.5",
        "pathe": "^1.1.1",
        "pretty-format": "^29.7.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/spy": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-1.6.1.tgz",
      "integrity": "sha512-MGcMmpGkZebsMZhbQKkAf9CX5zGvjkBTqf8Zx3ApYWXr3wG+QvEu2eXWfnIIWYSJExIp4V9FCKDEeygzkYrXMw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tinyspy": "^2.2.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/utils": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-1.6.1.tgz",
      "integrity": "sha512-jOrrUvXM4Av9ZWiG1EajNto0u96kWAhJ1LmPmJhXXQx/32MecEKd10pOLYgS2BQx1TgkGhloPU1ArDW2vvaY6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "diff-sequences": "^29.6.3",
        "estree-walker": "^3.0.3",
        "loupe": "^2.3.7",
        "pretty-format": "^29.7.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/agentkeepalive": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
      "license": "MIT",
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/array-union": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/assertion-error": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-1.1.0.tgz",
      "integrity": "sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/atob": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/atob/-/atob-2.1.2.tgz",
      "integrity": "sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==",
      "license": "(MIT OR Apache-2.0)",
      "bin": {
        "atob": "bin/atob.js"
      },
      "engines": {
        "node": ">= 4.5.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/base64-arraybuffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/base64-arraybuffer/-/base64-arraybuffer-1.0.2.tgz",
      "integrity": "sha512-I3yl4r9QB5ZRY3XuJVEPfc2XhZO6YweFPI+UovAzn+8/hb3oJ6lnysaFcjVpkCPfVWFUDvoZ8kmVDP7WyRtYtQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/bignumber.js": {
      "version": "9.3.1",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.1.tgz",
      "integrity": "sha512-Ko0uX15oIUS7wJ3Rb30Fs6SkVbLmPBAKdlm7q9+ak9bbIeFf0MwuBsQV6z7+X768/cHsfg+WlysDWJcmthjsjQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.3",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.3.tgz",
      "integrity": "sha512-cDGv1kkDI4/0e5yON9yM5G/0A5u8sf5TnmdX5C9qHzI9PPu++sQ9zjm1k9NiOrf3riY4OkK0zSGqfvJyJsgCBQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001735",
        "electron-to-chromium": "^1.5.204",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/btoa": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/btoa/-/btoa-1.2.1.tgz",
      "integrity": "sha512-SB4/MIGlsiVkMcHmT+pSmIPoNDoHg+7cMzmt3Uxt628MTz2487DKSqK/fuhFBrkuqrYv5UCEnACpF4dTFNKc/g==",
      "license": "(MIT OR Apache-2.0)",
      "bin": {
        "btoa": "bin/btoa.js"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/cac": {
      "version": "6.7.14",
      "resolved": "https://registry.npmjs.org/cac/-/cac-6.7.14.tgz",
      "integrity": "sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001737",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001737.tgz",
      "integrity": "sha512-BiloLiXtQNrY5UyF0+1nSJLXUENuhka2pzy2Fx5pGxqavdrxSCW4U6Pn/PoG3Efspi2frRbHpBV2XsrPE6EDlw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/canvg": {
      "version": "3.0.11",
      "resolved": "https://registry.npmjs.org/canvg/-/canvg-3.0.11.tgz",
      "integrity": "sha512-5ON+q7jCTgMp9cjpu4Jo6XbvfYwSB2Ow3kzHKfIyJfaCAOHLbdKPQqGKgfED/R5B+3TFFfe8pegYA+b423SRyA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "@types/raf": "^3.4.0",
        "core-js": "^3.8.3",
        "raf": "^3.4.1",
        "regenerator-runtime": "^0.13.7",
        "rgbcolor": "^1.0.1",
        "stackblur-canvas": "^2.0.0",
        "svg-pathdata": "^6.0.3"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/chai": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/chai/-/chai-4.5.0.tgz",
      "integrity": "sha512-RITGBfijLkBddZvnn8jdqoTypxvqbOLYQkGGxXzeFjVHvudaPw0HNFD9x928/eUwYWd2dPCugVqspGALTZZQKw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "assertion-error": "^1.1.0",
        "check-error": "^1.0.3",
        "deep-eql": "^4.1.3",
        "get-func-name": "^2.0.2",
        "loupe": "^2.3.6",
        "pathval": "^1.1.1",
        "type-detect": "^4.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/check-error": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/check-error/-/check-error-1.0.3.tgz",
      "integrity": "sha512-iKEoDYaRmd1mxM90a2OEfWhjsjPpYPuQ+lMYsoxB126+t8fw7ySEO48nmDg5COTjxDI65/Y2OWpeEHk3ZOe8zg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-func-name": "^2.0.2"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/confbox": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/confbox/-/confbox-0.1.8.tgz",
      "integrity": "sha512-RMtmw0iFkeR4YV+fUOSucriAQNb9g8zFR52MWCtl+cCZOFRNL6zeB395vPzFhEjjn4fMxXudmELnl/KF/WrK6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/core-js": {
      "version": "3.45.1",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.45.1.tgz",
      "integrity": "sha512-L4NPsJlCfZsPeXukyzHFlg/i7IIVwHSItR0wg0FLNqYClJ4MQYTYLbC7EkjKYRLZF2iof2MUgN0EGy7MdQFChg==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/css-line-break": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/css-line-break/-/css-line-break-2.1.0.tgz",
      "integrity": "sha512-FHcKFCZcAha3LwfVBhCQbW2nCNbkZXn7KVUJcsT5/P8YmfsVja0FMPJr0B903j/E69HUphKiV9iQArX8SDYA4w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "utrie": "^1.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-eql": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-4.1.4.tgz",
      "integrity": "sha512-SUwdGfqdKOwxCPeVYjwSyRpJ7Z+fhpwIAtmCUdZIWZ/YP5R9WAsyuSgpLVDi9bjWoN2LXHNss/dk3urXtdQxGg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-detect": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/diff-sequences": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dompurify": {
      "version": "2.5.8",
      "resolved": "https://registry.npmjs.org/dompurify/-/dompurify-2.5.8.tgz",
      "integrity": "sha512-o1vSNgrmYMQObbSSvF/1brBYEQPHhV1+gsmrusO7/GXtp1T9rCS8cXFqVxK/9crT1jA6Ccv+5MTSjBNqr7Sovw==",
      "license": "(MPL-2.0 OR Apache-2.0)",
      "optional": true
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.209",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.209.tgz",
      "integrity": "sha512-Xoz0uMrim9ZETCQt8UgM5FxQF9+imA7PBpokoGcZloA1uw2LeHzTlip5cb5KOAsXZLjh/moN2vReN3ZjJmjI9A==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.1",
        "@humanwhocodes/config-array": "^0.13.0",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz",
      "integrity": "sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.20",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/eslint/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estree-walker": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
      "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "^1.0.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/execa": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-8.0.1.tgz",
      "integrity": "sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^8.0.1",
        "human-signals": "^5.0.0",
        "is-stream": "^3.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^5.1.0",
        "onetime": "^6.0.0",
        "signal-exit": "^4.1.0",
        "strip-final-newline": "^3.0.0"
      },
      "engines": {
        "node": ">=16.17"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/execa/node_modules/is-stream": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-3.0.0.tgz",
      "integrity": "sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/fflate": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/fflate/-/fflate-0.8.2.tgz",
      "integrity": "sha512-cPJU47OaAoCbg0pBvzsgpTPhmhqI5eJjh/JIu8tPj5q+T7iLvW/JAYUqmE7KOB4R1ZyEhzBaIQpQpardBF5z8A==",
      "license": "MIT"
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/form-data-encoder": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-1.7.2.tgz",
      "integrity": "sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==",
      "license": "MIT"
    },
    "node_modules/formdata-node": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/formdata-node/-/formdata-node-4.4.1.tgz",
      "integrity": "sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==",
      "license": "MIT",
      "dependencies": {
        "node-domexception": "1.0.0",
        "web-streams-polyfill": "4.0.0-beta.3"
      },
      "engines": {
        "node": ">= 12.20"
      }
    },
    "node_modules/formdata-node/node_modules/web-streams-polyfill": {
      "version": "4.0.0-beta.3",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
      "integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gaxios": {
      "version": "6.7.1",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
      "integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^7.0.1",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.1.tgz",
      "integrity": "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A==",
      "license": "Apache-2.0",
      "dependencies": {
        "gaxios": "^6.1.1",
        "google-logging-utils": "^0.0.2",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-func-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/get-func-name/-/get-func-name-2.0.2.tgz",
      "integrity": "sha512-8vXOvuE167CtIc3OyItco7N/dpRtBbYOsPsXCz7X/PMnlGjYjSGuZJgM1Y7mmew7BKf9BqvLX2tnOVy1BBUsxQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-stream": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-8.0.1.tgz",
      "integrity": "sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/glob/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globby": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/google-auth-library": {
      "version": "9.15.1",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.15.1.tgz",
      "integrity": "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng==",
      "license": "Apache-2.0",
      "dependencies": {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "gaxios": "^6.1.1",
        "gcp-metadata": "^6.1.0",
        "gtoken": "^7.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-logging-utils": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/google-logging-utils/-/google-logging-utils-0.0.2.tgz",
      "integrity": "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/gtoken": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
      "integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
      "license": "MIT",
      "dependencies": {
        "gaxios": "^6.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/html2canvas": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/html2canvas/-/html2canvas-1.4.1.tgz",
      "integrity": "sha512-fPU6BHNpsyIhr8yyMpTLLxAbkaK8ArIBcmZIRiBLiDhjeqvXolaEmDGmELFuX9I4xDcaKKcJl+TKZLqruBbmWA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "css-line-break": "^2.1.0",
        "text-segmentation": "^1.0.3"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/human-signals": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-5.0.0.tgz",
      "integrity": "sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=16.17.0"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/idb-keyval": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/idb-keyval/-/idb-keyval-6.2.2.tgz",
      "integrity": "sha512-yjD9nARJ/jb1g+CvD0tlhUHOrJ9Sy0P8T9MF3YaLlHnSRpwPfpTX0XIvpmw3gAJUmEu3FiICLBDPXVwyEvrleg==",
      "license": "Apache-2.0"
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immediate": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
      "integrity": "sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==",
      "license": "MIT"
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "license": "MIT",
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jspdf": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jspdf/-/jspdf-2.5.2.tgz",
      "integrity": "sha512-myeX9c+p7znDWPk0eTrujCzNjT+CXdXyk7YmJq5nD5V7uLLKmSXnlQ/Jn/kuo3X09Op70Apm0rQSnFWyGK8uEQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.2",
        "atob": "^2.1.2",
        "btoa": "^1.2.1",
        "fflate": "^0.8.1"
      },
      "optionalDependencies": {
        "canvg": "^3.0.6",
        "core-js": "^3.6.0",
        "dompurify": "^2.5.4",
        "html2canvas": "^1.0.0-rc.5"
      }
    },
    "node_modules/jszip": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz",
      "integrity": "sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==",
      "license": "(MIT OR GPL-3.0-or-later)",
      "dependencies": {
        "lie": "~3.3.0",
        "pako": "~1.0.2",
        "readable-stream": "~2.3.6",
        "setimmediate": "^1.0.5"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.1.tgz",
      "integrity": "sha512-hRF04fqJIP8Abbkq5NKGN0Bbr3JxlQ+qhZufXVr0DvujKy93ZCbXZMHDL4EOtodSbCWxOqR8MS1tXA5hwqCXDg==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lie": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/lie/-/lie-3.3.0.tgz",
      "integrity": "sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==",
      "license": "MIT",
      "dependencies": {
        "immediate": "~3.0.5"
      }
    },
    "node_modules/local-pkg": {
      "version": "0.5.1",
      "resolved": "https://registry.npmjs.org/local-pkg/-/local-pkg-0.5.1.tgz",
      "integrity": "sha512-9rrA30MRRP3gBD3HTGnC6cDFpaE1kVDWxWgqWJUN0RvDNAo+Nz/9GxB+nHOH0ifbVFy0hSA1V6vFDvnx54lTEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mlly": "^1.7.3",
        "pkg-types": "^1.2.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/loupe": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/loupe/-/loupe-2.3.7.tgz",
      "integrity": "sha512-zSMINGVYkdpYSOBmLi0D1Uo7JU9nVdQKrHxC8eYlV+9YKK9WePqAlL7lSlorG/U2Fw1w0hTBmaa/jrQ3UbPHtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-func-name": "^2.0.1"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/magic-string": {
      "version": "0.30.18",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.18.tgz",
      "integrity": "sha512-yi8swmWbO17qHhwIBNeeZxTceJMeBvWJaId6dyvTSOwTipqeHhMhOrz6513r1sOKnpvQ7zkhlG8tPrpilwTxHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.5"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
      "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/mlly": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/mlly/-/mlly-1.8.0.tgz",
      "integrity": "sha512-l8D9ODSRWLe2KHJSifWGwBqpTZXIXTeo8mlKjY+E2HAakaTeNpqAyBZ8GSqLzHgw4XmHmC8whvpjJNMbFZN7/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.15.0",
        "pathe": "^2.0.3",
        "pkg-types": "^1.3.1",
        "ufo": "^1.6.1"
      }
    },
    "node_modules/mlly/node_modules/pathe": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
      "integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-domexception": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
      "deprecated": "Use your platform's native DOMException instead",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "github",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=10.5.0"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/npm-run-path": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-5.3.0.tgz",
      "integrity": "sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^4.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path/node_modules/path-key": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz",
      "integrity": "sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-6.0.0.tgz",
      "integrity": "sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^4.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/openai": {
      "version": "4.104.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-4.104.0.tgz",
      "integrity": "sha512-p99EFNsA/yX6UhVO93f5kJsDRLAg+CTA2RBqdHK4RtK8u5IJw32Hyb2dTGKbnnFmnuoBv5r7Z2CURI9sGZpSuA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
        "agentkeepalive": "^4.2.1",
        "form-data-encoder": "1.7.2",
        "formdata-node": "^4.3.2",
        "node-fetch": "^2.6.7"
      },
      "bin": {
        "openai": "bin/cli"
      },
      "peerDependencies": {
        "ws": "^8.18.0",
        "zod": "^3.23.8"
      },
      "peerDependenciesMeta": {
        "ws": {
          "optional": true
        },
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/openai/node_modules/@types/node": {
      "version": "18.19.123",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.123.tgz",
      "integrity": "sha512-K7DIaHnh0mzVxreCR9qwgNxp3MH9dltPNIEddW9MYUlcKAzm+3grKNSTe2vCJHI1FaLpvpL5JGJrz1UZDKYvDg==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/openai/node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
      "license": "MIT"
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pako": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==",
      "license": "(MIT AND Zlib)"
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pathe": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/pathe/-/pathe-1.1.2.tgz",
      "integrity": "sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/pathval": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/pathval/-/pathval-1.1.1.tgz",
      "integrity": "sha512-Dp6zGqpTdETdR63lehJYPeIOqpiNBNtc7BpWSLrOje7UaIsE5aY92r/AunQA7rsXvet3lrJ3JnZX29UPTKXyKQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/php-parser": {
      "version": "3.2.5",
      "resolved": "https://registry.npmjs.org/php-parser/-/php-parser-3.2.5.tgz",
      "integrity": "sha512-M1ZYlALFFnESbSdmRtTQrBFUHSriHgPhgqtTF/LCbZM4h7swR5PHtUceB2Kzby5CfqcsYwBn7OXTJ0+8Sajwkw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pkg-types": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/pkg-types/-/pkg-types-1.3.1.tgz",
      "integrity": "sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "confbox": "^0.1.8",
        "mlly": "^1.7.4",
        "pathe": "^2.0.1"
      }
    },
    "node_modules/pkg-types/node_modules/pathe": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
      "integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/raf": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/raf/-/raf-3.4.1.tgz",
      "integrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "performance-now": "^2.1.0"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/readable-stream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/regenerator-runtime": {
      "version": "0.13.11",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
      "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rgbcolor": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/rgbcolor/-/rgbcolor-1.0.1.tgz",
      "integrity": "sha512-9aZLIrhRaD97sgVhtJOW6ckOEh6/GnvQtdVNfdZ6s67+3/XwLS9lBcQYzEEhYVeUowN7pRzMLsyGhK2i/xvWbw==",
      "license": "MIT OR SEE LICENSE IN FEEL-FREE.md",
      "optional": true,
      "engines": {
        "node": ">= 0.8.15"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rollup": {
      "version": "4.48.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.48.1.tgz",
      "integrity": "sha512-jVG20NvbhTYDkGAty2/Yh7HK6/q3DGSRH4o8ALKGArmMuaauM9kLfoMZ+WliPwA5+JHr2lTn3g557FxBV87ifg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.48.1",
        "@rollup/rollup-android-arm64": "4.48.1",
        "@rollup/rollup-darwin-arm64": "4.48.1",
        "@rollup/rollup-darwin-x64": "4.48.1",
        "@rollup/rollup-freebsd-arm64": "4.48.1",
        "@rollup/rollup-freebsd-x64": "4.48.1",
        "@rollup/rollup-linux-arm-gnueabihf": "4.48.1",
        "@rollup/rollup-linux-arm-musleabihf": "4.48.1",
        "@rollup/rollup-linux-arm64-gnu": "4.48.1",
        "@rollup/rollup-linux-arm64-musl": "4.48.1",
        "@rollup/rollup-linux-loongarch64-gnu": "4.48.1",
        "@rollup/rollup-linux-ppc64-gnu": "4.48.1",
        "@rollup/rollup-linux-riscv64-gnu": "4.48.1",
        "@rollup/rollup-linux-riscv64-musl": "4.48.1",
        "@rollup/rollup-linux-s390x-gnu": "4.48.1",
        "@rollup/rollup-linux-x64-gnu": "4.48.1",
        "@rollup/rollup-linux-x64-musl": "4.48.1",
        "@rollup/rollup-win32-arm64-msvc": "4.48.1",
        "@rollup/rollup-win32-ia32-msvc": "4.48.1",
        "@rollup/rollup-win32-x64-msvc": "4.48.1",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/siginfo": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/siginfo/-/siginfo-2.0.0.tgz",
      "integrity": "sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stackback": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
      "integrity": "sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/stackblur-canvas": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/stackblur-canvas/-/stackblur-canvas-2.7.0.tgz",
      "integrity": "sha512-yf7OENo23AGJhBriGx0QivY5JP6Y1HbrrDI6WLt6C5auYZXlQrheoY8hD4ibekFKz1HOfE48Ww8kMWMnJD/zcQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.1.14"
      }
    },
    "node_modules/std-env": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
      "integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/string_decoder/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-3.0.0.tgz",
      "integrity": "sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strip-literal": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/strip-literal/-/strip-literal-2.1.1.tgz",
      "integrity": "sha512-631UJ6O00eNGfMiWG78ck80dfBab8X6IVFB51jZK5Icd7XAs60Z5y7QdSd/wGIklnWvRbUNloVzhOKKmutxQ6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^9.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      }
    },
    "node_modules/strip-literal/node_modules/js-tokens": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-9.0.1.tgz",
      "integrity": "sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/svg-pathdata": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-6.0.3.tgz",
      "integrity": "sha512-qsjeeq5YjBZ5eMdFuUa4ZosMLxgr5RZ+F+Y1OrDhuOCEInRMA3x74XdBtggJcj9kOeInz0WE+LgCPDkZFlBYJw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/text-segmentation": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/text-segmentation/-/text-segmentation-1.0.3.tgz",
      "integrity": "sha512-iOiPUo/BGnZ6+54OsWxZidGCsdU8YbE4PSpdPinp7DeMtUJNJBoJ/ouUSTJjHkh1KntHaltHl/gDs2FC4i5+Nw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "utrie": "^1.0.2"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tinybench": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/tinybench/-/tinybench-2.9.0.tgz",
      "integrity": "sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tinypool": {
      "version": "0.8.4",
      "resolved": "https://registry.npmjs.org/tinypool/-/tinypool-0.8.4.tgz",
      "integrity": "sha512-i11VH5gS6IFeLY3gMBQ00/MmLncVP7JLXOw1vlgkytLmJK7QnEr7NXf0LBdxfmNPAeyetukOk0bOYrJrFGjYJQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/tinyspy": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/tinyspy/-/tinyspy-2.2.1.tgz",
      "integrity": "sha512-KYad6Vy5VDWV4GH3fjpseMQ/XU2BhIYP7Vzd0LG44qRWm/Yt2WCOTicFdvmgo6gWaqooMQCawTtILVQJupKu7A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/ts-api-utils": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.4.3.tgz",
      "integrity": "sha512-i3eMG77UTMD0hZhgRS562pv83RC6ukSAC2GMNWc+9dieh/+jDM5u5YG+NHX6VNDRHQcHwmsTHctP9LhbC3WxVw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=16"
      },
      "peerDependencies": {
        "typescript": ">=4.2.0"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.1.0.tgz",
      "integrity": "sha512-Acylog8/luQ8L7il+geoSxhEkazvkslg7PSNKOX59mbB9cOveP5aq9h74Y7YU8yDpJwetzQQrfIwtf4Wp4LKcw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/ufo": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/ufo/-/ufo-1.6.1.tgz",
      "integrity": "sha512-9a4/uxlTWJ4+a5i0ooc1rU7C7YOw3wT+UGqdeNNHWnOF9qcMBgLRS+4IYUqbczewFx4mLEig6gawh7X6mFlEkA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "license": "MIT"
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/utrie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/utrie/-/utrie-1.0.2.tgz",
      "integrity": "sha512-1MLa5ouZiOmQzUbjbu9VmjLzn1QLXBhwpUa7kdLUQK+KQ5KA9I1vk5U4YHe/X2Ch7PYnJfWuWT+VbuxbGwljhw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "base64-arraybuffer": "^1.0.2"
      }
    },
    "node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/vite": {
      "version": "5.4.19",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/vite-node": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/vite-node/-/vite-node-1.6.1.tgz",
      "integrity": "sha512-YAXkfvGtuTzwWbDSACdJSg4A4DZiAqckWe90Zapc/sEX3XvHcw1NdurM/6od8J207tSDqNbSsgdCacBgvJKFuA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cac": "^6.7.14",
        "debug": "^4.3.4",
        "pathe": "^1.1.1",
        "picocolors": "^1.0.0",
        "vite": "^5.0.0"
      },
      "bin": {
        "vite-node": "vite-node.mjs"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/vitest": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/vitest/-/vitest-1.6.1.tgz",
      "integrity": "sha512-Ljb1cnSJSivGN0LqXd/zmDbWEM0RNNg2t1QW/XUhYl/qPqyu7CsqeWtqQXHVaJsecLPuDoak2oJcZN2QoRIOag==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/expect": "1.6.1",
        "@vitest/runner": "1.6.1",
        "@vitest/snapshot": "1.6.1",
        "@vitest/spy": "1.6.1",
        "@vitest/utils": "1.6.1",
        "acorn-walk": "^8.3.2",
        "chai": "^4.3.10",
        "debug": "^4.3.4",
        "execa": "^8.0.1",
        "local-pkg": "^0.5.0",
        "magic-string": "^0.30.5",
        "pathe": "^1.1.1",
        "picocolors": "^1.0.0",
        "std-env": "^3.5.0",
        "strip-literal": "^2.0.0",
        "tinybench": "^2.5.1",
        "tinypool": "^0.8.3",
        "vite": "^5.0.0",
        "vite-node": "1.6.1",
        "why-is-node-running": "^2.2.2"
      },
      "bin": {
        "vitest": "vitest.mjs"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      },
      "peerDependencies": {
        "@edge-runtime/vm": "*",
        "@types/node": "^18.0.0 || >=20.0.0",
        "@vitest/browser": "1.6.1",
        "@vitest/ui": "1.6.1",
        "happy-dom": "*",
        "jsdom": "*"
      },
      "peerDependenciesMeta": {
        "@edge-runtime/vm": {
          "optional": true
        },
        "@types/node": {
          "optional": true
        },
        "@vitest/browser": {
          "optional": true
        },
        "@vitest/ui": {
          "optional": true
        },
        "happy-dom": {
          "optional": true
        },
        "jsdom": {
          "optional": true
        }
      }
    },
    "node_modules/web-streams-polyfill": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz",
      "integrity": "sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/why-is-node-running": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
      "integrity": "sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "siginfo": "^2.0.0",
        "stackback": "0.0.2"
      },
      "bin": {
        "why-is-node-running": "cli.js"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}
// END ./wp-plugin-bonsai/package-lock.json

// START ./wp-plugin-bonsai/package.json
{
  "name": "wp-plugin-bonsai",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "test": "vitest"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.22.0",
    "@google/genai": "^1.15.0",
    "idb-keyval": "^6.2.1",
    "jspdf": "^2.5.1",
    "jszip": "^3.10.1",
    "openai": "^4.53.2",
    "php-parser": "^3.1.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/node": "^20.14.2",
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@typescript-eslint/eslint-plugin": "^7.2.0",
    "@typescript-eslint/parser": "^7.2.0",
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "typescript": "^5.2.2",
    "vite": "^5.2.0",
    "vitest": "^1.6.0"
  }
}
// END ./wp-plugin-bonsai/package.json

// START ./wp-plugin-bonsai/public/metadata.json
{
  "name": "AI Developer Assistant",
  "description": "An AI-powered tool to build, review, and integrate applications for WordPress and Google Workspace.",
  "requestFramePermissions": []
}
// END ./wp-plugin-bonsai/public/metadata.json

// START ./wp-plugin-bonsai/src/App.tsx
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import JSZip from 'jszip';
import { Header } from '@/components/Header';
import { MultiPluginUploader } from '@/components/MultiPluginUploader';
import { ReviewResults } from '@/components/ReviewResults';
import { Loader } from '@/components/Loader';
import { performLocalAnalysis } from '@/services/localAnalysisService';
import * as aiService from '@/services/aiService';
import * as storageService from '@/services/storageService';
import { ReviewIssue, Plugin, PluginFile, AppMode, Workspace, ConfirmationState, ProviderStatus } from '@/types';
import { IntegrationBuilder } from '@/components/IntegrationBuilder';
import { PluginBuilder } from '@/components/PluginBuilder';
import { PluginPackager } from '@/components/PluginPackager';
import { FileEditor } from '@/components/FileEditor';
import { ModelSelector } from '@/components/ModelSelector';
import { models as availableModels } from '@/config/models';
import { WorkspaceManager } from '@/components/WorkspaceManager';
import { ModeSwitcher } from '@/components/ModeSwitcher';
import { localCodePatcher } from '@/services/localCodePatcher';
import { useOnlineStatus } from '@/hooks/useOnlineStatus';
import { Footer } from '@/components/Footer';
import { HistoryControls } from '@/components/HistoryControls';
import { ConfirmationModal } from '@/components/ConfirmationModal';
import { EmptyState } from '@/components/EmptyState';
import { CodeResultViewer } from '@/components/CodeResultViewer';
import { ApiKeyManager } from '@/components/ApiKeyManager';


const createNewPlugin = (name: string): Plugin => ({
  id: Date.now().toString(36) + Math.random().toString(36).substring(2),
  name,
  zipName: null,
  files: [],
});

const createNewFileEditorPlugin = (): Plugin => ({
    id: 'file-editor-plugin',
    name: 'Single File Editor',
    zipName: null,
    files: [{ id: 'file-editor-file', name: 'untitled.php', code: '<?php\n\n// Paste your code here.', modified: false }],
});

const createNewWorkspace = (name: string): Workspace => {
    const initialPlugins = [createNewPlugin('Plugin 1'), createNewPlugin('Plugin 2')];
    return {
        id: Date.now().toString(36) + Math.random().toString(36).substring(2),
        name,
        plugins: initialPlugins,
        reviewIssues: null,
        mode: 'wordpress',
        selectedModelId: availableModels[0].id,
        createdAt: new Date().toISOString(),
        history: [initialPlugins],
        historyIndex: 0,
    };
};

const ALLOWED_EXTENSIONS = ['.php', '.js', '.css', '.html', '.txt', '.md', '.json', '.xml'];

function App(): React.ReactNode {
  const [workspaces, setWorkspaces] = useState<Workspace[]>([]);
  const [activeWorkspaceId, setActiveWorkspaceId] = useState<string | null>(null);
  const [status, setStatus] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [applyingFixId, setApplyingFixId] = useState<string | null>(null);
  const [isApplyingBatch, setIsApplyingBatch] = useState<boolean>(false);
  const [uploadingPluginId, setUploadingPluginId] = useState<string | null>(null);
  const [confirmation, setConfirmation] = useState<ConfirmationState | null>(null);
  const [previewModal, setPreviewModal] = useState<{ title: string; content: React.ReactNode } | null>(null);
  const [providerStatus, setProviderStatus] = useState<ProviderStatus>({ Google: true, OpenAI: true, Anthropic: true });

  const isOnline = useOnlineStatus();

  useEffect(() => {
    const loadData = async () => {
      const savedWorkspaces = await storageService.loadWorkspaces();
      if (savedWorkspaces.length > 0) {
        setWorkspaces(savedWorkspaces);
        setActiveWorkspaceId(savedWorkspaces[0].id);
      } else {
        const newWorkspace = createNewWorkspace('Default Workspace');
        setWorkspaces([newWorkspace]);
        setActiveWorkspaceId(newWorkspace.id);
      }
      const savedProviderStatus = await storageService.loadProviderStatus();
      if (savedProviderStatus) {
        setProviderStatus(savedProviderStatus);
      }
    };
    loadData();
  }, []);

  useEffect(() => {
    if (workspaces.length > 0) {
      storageService.saveWorkspaces(workspaces);
    }
  }, [workspaces]);

  useEffect(() => {
    storageService.saveProviderStatus(providerStatus);
  }, [providerStatus]);

  const activeWorkspace = useMemo(() => {
    return workspaces.find(ws => ws.id === activeWorkspaceId);
  }, [workspaces, activeWorkspaceId]);
  
  const enabledModels = useMemo(() => {
    return availableModels.filter(model => providerStatus[model.provider]);
  }, [providerStatus]);

  const updateWorkspace = useCallback((workspaceId: string, updates: Partial<Workspace>) => {
    setWorkspaces(wss => wss.map(ws => ws.id === workspaceId ? { ...ws, ...updates } : ws));
  }, []);

  const updatePluginsWithHistory = useCallback((workspaceId: string, newPlugins: Plugin[]) => {
    const ws = workspaces.find(w => w.id === workspaceId);
    if (!ws) return;

    const currentHistory = ws.history.slice(0, ws.historyIndex + 1);
    let newHistory = [...currentHistory, newPlugins];
    if (newHistory.length > 4) {
        newHistory = newHistory.slice(newHistory.length - 4);
    }
    
    updateWorkspace(workspaceId, {
      plugins: newPlugins,
      history: newHistory,
      historyIndex: newHistory.length - 1,
    });
  }, [workspaces, updateWorkspace]);

  const handleWorkspaceChange = (id: string) => setActiveWorkspaceId(id);

  const handleAddWorkspace = () => {
    const newWorkspace = createNewWorkspace(`Workspace ${workspaces.length + 1}`);
    setWorkspaces(wss => [...wss, newWorkspace]);
    setActiveWorkspaceId(newWorkspace.id);
  };

  const handleRenameWorkspace = (id: string, newName: string) => {
    setWorkspaces(wss => wss.map(ws => ws.id === id ? { ...ws, name: newName } : ws));
  };

  const handleDeleteWorkspace = (id: string) => {
    setConfirmation({
        message: 'Are you sure you want to delete this workspace? This action cannot be undone.',
        onConfirm: () => {
            if (workspaces.length <= 1) return;
            const remaining = workspaces.filter(ws => ws.id !== id);
            setWorkspaces(remaining);
            setActiveWorkspaceId(remaining[0]?.id || null);
            setConfirmation(null);
        },
        onCancel: () => setConfirmation(null),
    });
  };

  const handleModeChange = (mode: AppMode) => {
    if (activeWorkspace) {
        let plugins = activeWorkspace.plugins;
        if (mode === 'file-editor' && (plugins.length !== 1 || plugins[0].id !== 'file-editor-plugin')) {
            plugins = [createNewFileEditorPlugin()];
        } else if (mode === 'wordpress' && (plugins.length < 2 || plugins[0].id === 'file-editor-plugin')) {
            plugins = [createNewPlugin('Plugin 1'), createNewPlugin('Plugin 2')];
        } else if (mode === 'plugin-packager') {
            plugins = []; 
        }
        updateWorkspace(activeWorkspace.id, { mode, plugins, reviewIssues: null, history: [plugins], historyIndex: 0 });
    }
  };

  const handleModelChange = (modelId: string) => {
    if (activeWorkspace) {
      updateWorkspace(activeWorkspace.id, { selectedModelId: modelId });
    }
  };

  const setPlugins = (updater: (plugins: Plugin[]) => Plugin[]) => {
    if (activeWorkspace) {
      const newPlugins = updater(activeWorkspace.plugins);
      updatePluginsWithHistory(activeWorkspace.id, newPlugins);
    }
  };
  
  const handlePluginNameChange = (pluginId: string, newName: string) => {
    if (!activeWorkspace) return;
    const newPlugins = activeWorkspace.plugins.map(p => (p.id === pluginId ? { ...p, name: newName } : p));
    updateWorkspace(activeWorkspace.id, { plugins: newPlugins });
  };

  const handleAddPlugin = () => {
    if (activeWorkspace && activeWorkspace.plugins.length < 10) {
      const newPlugins = [...activeWorkspace.plugins, createNewPlugin(`Plugin ${activeWorkspace.plugins.length + 1}`)];
      updateWorkspace(activeWorkspace.id, { plugins: newPlugins, history: [newPlugins], historyIndex: 0 });
    }
  };

  const handleRemovePlugin = (id: string) => {
    if (activeWorkspace && activeWorkspace.plugins.length > 2) {
      const newPlugins = activeWorkspace.plugins.filter(p => p.id !== id);
      updateWorkspace(activeWorkspace.id, { plugins: newPlugins, history: [newPlugins], historyIndex: 0 });
    }
  };
  
  const handleZipUpload = async (pluginId: string, file: File) => {
    if (!activeWorkspace) return;
    setUploadingPluginId(pluginId);
    setError(null);
    try {
      const zip = await JSZip.loadAsync(file);
      const extractedFiles: PluginFile[] = [];

      for (const relativePath in zip.files) {
        const zipEntry = zip.files[relativePath];
        if (!zipEntry.dir && ALLOWED_EXTENSIONS.some(ext => relativePath.toLowerCase().endsWith(ext))) {
          const content = await zipEntry.async('string');
          extractedFiles.push({ id: `${pluginId}-${relativePath}`, name: relativePath, code: content, modified: false });
        }
      }
      
      const newPlugins = activeWorkspace.plugins.map(p =>
          p.id === pluginId ? { ...p, files: extractedFiles, zipName: file.name } : p
      );
      updateWorkspace(activeWorkspace.id, { plugins: newPlugins, history: [newPlugins], historyIndex: 0 });
    } catch (err) {
      setError(`Failed to process ${file.name}. Is it a valid zip file?`);
    } finally {
      setUploadingPluginId(null);
    }
  };

  const runReviewFlow = useCallback(async (pluginsToReview: Plugin[]) => {
    if (!activeWorkspace) return;
    setError(null);
    updateWorkspace(activeWorkspace.id, { reviewIssues: null });

    setStatus('Running local analysis...');
    const localIssues = performLocalAnalysis(pluginsToReview).map((issue, i) => ({...issue, id: `local-${i}`}));
    updateWorkspace(activeWorkspace.id, { reviewIssues: localIssues });

    if (!isOnline) {
      setStatus("Offline. Showing local analysis results only.");
      return;
    }
    
    setStatus('Querying AI for deep analysis...');
    try {
      const aiIssues = await aiService.runReview(pluginsToReview, activeWorkspace.selectedModelId, providerStatus, setStatus);
      const aiIssuesWithIds = aiIssues.map((issue, i) => ({...issue, id: `ai-${i}`}));
      setWorkspaces(wss => wss.map(ws => {
        if (ws.id === activeWorkspaceId) {
            const currentLocal = ws.reviewIssues?.filter(i => i.source === 'Local Scanner') || [];
            return { ...ws, reviewIssues: [...currentLocal, ...aiIssuesWithIds] };
        }
        return ws;
      }));
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during the AI review.');
    } finally {
      setStatus(null);
    }
  }, [activeWorkspace, activeWorkspaceId, isOnline, updateWorkspace, providerStatus, setWorkspaces]);

  const handleReview = useCallback(() => {
    if (!activeWorkspace) return;
    const pluginsWithCode = activeWorkspace.plugins.filter(p => p.files.length > 0 && p.files.some(f => f.code.trim()));
    if (activeWorkspace.mode === 'wordpress' && pluginsWithCode.length === 0) {
      setError('Please upload at least one plugin zip file to review.');
      return;
    }
    if (activeWorkspace.mode === 'file-editor' && pluginsWithCode.length === 0) {
        setError('Please upload or paste code into the editor to review.');
        return;
    }
    runReviewFlow(activeWorkspace.plugins);
  }, [activeWorkspace, runReviewFlow]);

  const handleApplyFix = useCallback(async (issueToFix: ReviewIssue) => {
    if (!issueToFix.id || !activeWorkspace) return;
  
    setApplyingFixId(issueToFix.id);
    setError(null);
    try {
      const modificationPlan = await aiService.getModificationPlan(activeWorkspace.plugins, issueToFix, activeWorkspace.selectedModelId, providerStatus, setStatus);
      const targetPlugin = activeWorkspace.plugins.find(p => p.name === modificationPlan.pluginName);
      const targetFile = targetPlugin?.files.find(f => f.name === modificationPlan.fileName);
      if (!targetFile) throw new Error(`Target file ${modificationPlan.fileName} not found.`);

      const newCode = localCodePatcher.applyPatch(targetFile.code, modificationPlan.changes);
      
      const updatedPlugins = activeWorkspace.plugins.map(p => 
        p.name === modificationPlan.pluginName
          ? {...p, files: p.files.map(f => f.name === modificationPlan.fileName ? { ...f, code: newCode, modified: true } : f)}
          : p
      );
      
      updatePluginsWithHistory(activeWorkspace.id, updatedPlugins);
      await runReviewFlow(updatedPlugins);
    } catch (err) {
      setError(`An error occurred while applying the fix for ${issueToFix.fileName}.`);
    } finally {
      setApplyingFixId(null);
      setStatus(null);
    }
  }, [activeWorkspace, runReviewFlow, updatePluginsWithHistory, providerStatus]);

  const handleApplyAllSafeFixes = useCallback(async () => {
    if (!activeWorkspace || !activeWorkspace.reviewIssues) return;

    const safeIssues = activeWorkspace.reviewIssues.filter(issue => issue.severity === 'Info' && issue.source === 'AI Analysis');
    if (safeIssues.length === 0) return;

    setIsApplyingBatch(true);
    let currentPlugins = activeWorkspace.plugins;
    
    try {
      for (const issue of safeIssues) {
        const ws = workspaces.find(w => w.id === activeWorkspaceId);
        if (!ws) break;
        
        setApplyingFixId(issue.id!);
        const modificationPlan = await aiService.getModificationPlan(currentPlugins, issue, ws.selectedModelId, providerStatus, () => {});
        const targetFile = currentPlugins.find(p => p.name === modificationPlan.pluginName)?.files.find(f => f.name === modificationPlan.fileName);
        if (!targetFile) continue;

        const newCode = localCodePatcher.applyPatch(targetFile.code, modificationPlan.changes);
        currentPlugins = currentPlugins.map(p => 
            p.name === modificationPlan.pluginName 
            ? {...p, files: p.files.map(f => f.name === modificationPlan.fileName ? {...f, code: newCode, modified: true} : f)} 
            : p
        );
        setApplyingFixId(null);
      }
      updatePluginsWithHistory(activeWorkspace.id, currentPlugins);
      await runReviewFlow(currentPlugins);
    } catch (error) {
       setError("An error occurred during the batch fix process.");
    } finally {
      setIsApplyingBatch(false);
      setApplyingFixId(null);
    }
  }, [activeWorkspace, workspaces, activeWorkspaceId, runReviewFlow, updatePluginsWithHistory, providerStatus]);

  const promptForFilename = (defaultName: string): string | null => {
    return window.prompt("Enter a filename for the download:", defaultName);
  };
  
  const handleDownloadPlugin = async (pluginId: string) => {
    if (!activeWorkspace) return;
    const plugin = activeWorkspace.plugins.find(p => p.id === pluginId);
    if (!plugin || plugin.files.length === 0) return;

    const originalName = plugin.zipName || `${plugin.name}.zip`;
    const baseName = originalName.endsWith('.zip') ? originalName.slice(0, -4) : originalName;
    const defaultName = `${baseName}-modified.zip`;
    const fileName = promptForFilename(defaultName);
    if (!fileName) return;

    const zip = new JSZip();
    plugin.files.forEach(file => zip.file(file.name, file.code));
    const blob = await zip.generateAsync({ type: "blob" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = fileName;
    link.click();
    URL.revokeObjectURL(link.href);
  };

  const handleGenerateFile = useCallback(async (pluginId: string) => {
    if (!activeWorkspace) return;
    const plugin = activeWorkspace.plugins.find(p => p.id === pluginId);
    if (!plugin) return;

    const fileDescription = window.prompt("Describe the file you want to generate (e.g., 'a readme.txt file', 'an uninstall.php script'):");
    if (!fileDescription || !fileDescription.trim()) return;

    setStatus(`Generating file for ${plugin.name}...`);
    setError(null);
    try {
        const { fileName, code } = await aiService.generateSingleFile(plugin, fileDescription, activeWorkspace.selectedModelId, providerStatus, setStatus);
        
        setPreviewModal({
            title: `Generated File: ${fileName}`,
            content: (
                <div>
                    <CodeResultViewer files={[{ fileName, code }]} title="Preview" />
                    <div className="flex justify-end gap-4 mt-4">
                        <button onClick={() => setPreviewModal(null)} className="px-4 py-2 bg-slate-600 text-white font-semibold rounded-md hover:bg-slate-500">Close</button>
                        <button onClick={() => {
                            const newFile: PluginFile = { id: `${plugin.id}-${fileName}-${Date.now()}`, name: fileName, code: code, modified: true };
                            const updatedPlugins = activeWorkspace.plugins.map(p => {
                                if (p.id === pluginId) {
                                    const existingIndex = p.files.findIndex(f => f.name.toLowerCase() === fileName.toLowerCase());
                                    const newFiles = [...p.files];
                                    if (existingIndex !== -1) newFiles[existingIndex] = newFile;
                                    else newFiles.push(newFile);
                                    return { ...p, files: newFiles };
                                }
                                return p;
                            });
                            updatePluginsWithHistory(activeWorkspace.id, updatedPlugins);
                            setPreviewModal(null);
                        }} className="px-4 py-2 bg-emerald-600 text-white font-semibold rounded-md hover:bg-emerald-500">Add to Plugin</button>
                    </div>
                </div>
            )
        });
    } catch(err) {
        setError(err instanceof Error ? err.message : "Failed to generate the file.");
    } finally {
        setStatus(null);
    }
  }, [activeWorkspace, updatePluginsWithHistory, providerStatus]);
  
  const handleUndo = () => {
    if (!activeWorkspace || activeWorkspace.historyIndex <= 0) return;
    const newIndex = activeWorkspace.historyIndex - 1;
    const previousPlugins = activeWorkspace.history[newIndex];
    updateWorkspace(activeWorkspace.id, { plugins: previousPlugins, historyIndex: newIndex });
  };
  
  const handleRedo = () => {
    if (!activeWorkspace || activeWorkspace.historyIndex >= activeWorkspace.history.length - 1) return;
    const newIndex = activeWorkspace.historyIndex + 1;
    const nextPlugins = activeWorkspace.history[newIndex];
    updateWorkspace(activeWorkspace.id, { plugins: nextPlugins, historyIndex: newIndex });
  };

  const isLoading = !!status;
  const isActionDisabled = useMemo(() => isLoading || !!applyingFixId || !!uploadingPluginId || isApplyingBatch, [isLoading, applyingFixId, uploadingPluginId, isApplyingBatch]);
  
  const mainButtonText = useMemo(() => {
    if (status) return status;
    if (isApplyingBatch) return 'Applying All Fixes...';
    if (uploadingPluginId) return 'Processing Zip...';
    if (activeWorkspace?.mode === 'file-editor') return 'Review File';
    return 'Review Interoperability';
  }, [status, isApplyingBatch, uploadingPluginId, activeWorkspace?.mode]);

  if (!activeWorkspace) {
    return <div className="min-h-screen bg-slate-900 text-white flex items-center justify-center"><Loader message="Loading Workspaces..." /></div>;
  }

  const hasContent = activeWorkspace.plugins.some(p => p.files.length > 0 && p.files.some(f => f.code.trim()));

  return (
    <div className="min-h-screen bg-slate-900 text-white font-sans flex flex-col">
      <Header>
        <WorkspaceManager workspaces={workspaces} activeWorkspaceId={activeWorkspaceId} onSwitch={handleWorkspaceChange} onAdd={handleAddWorkspace} onRename={handleRenameWorkspace} onDelete={handleDeleteWorkspace} />
        <ModeSwitcher currentMode={activeWorkspace.mode} onModeChange={handleModeChange} />
        <ApiKeyManager providerStatus={providerStatus} onProviderStatusChange={setProviderStatus} />
      </Header>
      <main className="container mx-auto px-4 py-8 flex-grow">
        {activeWorkspace.mode === 'wordpress' && (
          <div className="max-w-7xl mx-auto">
            {!hasContent && !uploadingPluginId && <EmptyState mode="wordpress" />}
            <MultiPluginUploader plugins={activeWorkspace.plugins} onPluginNameChange={handlePluginNameChange} onAddPlugin={handleAddPlugin} onRemovePlugin={handleRemovePlugin} onZipUpload={handleZipUpload} uploadingPluginId={uploadingPluginId} onDownloadPlugin={handleDownloadPlugin} onGenerateFile={handleGenerateFile} isActionDisabled={isActionDisabled} />
            <div className="mt-8 flex flex-col items-center gap-4">
              <HistoryControls onUndo={handleUndo} onRedo={handleRedo} canUndo={activeWorkspace.historyIndex > 0} canRedo={activeWorkspace.historyIndex < activeWorkspace.history.length - 1} />
              <ModelSelector models={enabledModels} selectedModelId={activeWorkspace.selectedModelId} onModelChange={handleModelChange} disabled={isActionDisabled}/>
              <button onClick={handleReview} disabled={isActionDisabled || enabledModels.length === 0} title={enabledModels.length === 0 ? "Please enable at least one AI provider" : ""} className="px-8 py-3 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-500 disabled:bg-indigo-800 disabled:cursor-not-allowed transition-colors duration-300 shadow-lg shadow-indigo-600/30">
                {mainButtonText}
              </button>
            </div>
          </div>
        )}
        {activeWorkspace.mode === 'file-editor' && (
            <FileEditor workspace={activeWorkspace} onUpdatePlugins={setPlugins} onReview={handleReview} isActionDisabled={isActionDisabled} mainButtonText={mainButtonText} onModelChange={handleModelChange} onUndo={handleUndo} onRedo={handleRedo} enabledModels={enabledModels} />
        )}
        {activeWorkspace.mode === 'integration' && <IntegrationBuilder providerStatus={providerStatus} enabledModels={enabledModels} />}
        {activeWorkspace.mode === 'plugin-builder' && <PluginBuilder providerStatus={providerStatus} enabledModels={enabledModels} />}
        {activeWorkspace.mode === 'plugin-packager' && <PluginPackager providerStatus={providerStatus} enabledModels={enabledModels} />}


        {(activeWorkspace.mode === 'wordpress' || activeWorkspace.mode === 'file-editor') && (
            <div className="mt-12 max-w-7xl mx-auto">
              {isLoading && !activeWorkspace.reviewIssues?.length && <Loader message={status} />}
              {error && (<div className="relative text-center p-4 bg-red-900/50 border border-red-500 rounded-lg">{error}<button onClick={() => setError(null)} className="absolute top-2 right-2 text-red-300 hover:text-white">&times;</button></div>)}
              {activeWorkspace.reviewIssues && (
                <ReviewResults issues={activeWorkspace.reviewIssues} onApplyFix={handleApplyFix} onApplyAllSafeFixes={handleApplyAllSafeFixes} applyingFixId={applyingFixId} isBatching={isApplyingBatch} isOnline={isOnline} />
              )}
            </div>
        )}
      </main>
      <ConfirmationModal confirmation={confirmation} />
      {previewModal && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4" onClick={() => setPreviewModal(null)}>
          <div className="bg-slate-800 border border-slate-700 rounded-lg shadow-2xl w-full max-w-4xl max-h-[90vh] flex flex-col" onClick={e => e.stopPropagation()}>
            <div className="flex justify-between items-center p-4 border-b border-slate-700"><h3 className="font-semibold text-lg text-slate-200">{previewModal.title}</h3><button onClick={() => setPreviewModal(null)} className="text-slate-400 hover:text-white">&times;</button></div>
            <div className="p-4 overflow-auto flex-grow">{previewModal.content}</div>
          </div>
        </div>
      )}
      <Footer isOnline={isOnline} />
    </div>
  );
}

export default App;
// END ./wp-plugin-bonsai/src/App.tsx

// START ./wp-plugin-bonsai/src/components/ApiKeyManager.tsx
import React, { useState } from 'react';
import { Provider, ProviderStatus } from '@/types';

interface ApiKeyManagerProps {
    providerStatus: ProviderStatus;
    onProviderStatusChange: (status: ProviderStatus) => void;
}

const providers: Provider[] = ['Google', 'OpenAI', 'Anthropic'];

const Toggle: React.FC<{ enabled: boolean; onChange: (enabled: boolean) => void }> = ({ enabled, onChange }) => {
    return (
        <button
            onClick={() => onChange(!enabled)}
            className={`relative inline-flex items-center h-6 rounded-full w-11 transition-colors ${enabled ? 'bg-indigo-600' : 'bg-slate-600'}`}
        >
            <span className={`inline-block w-4 h-4 transform bg-white rounded-full transition-transform ${enabled ? 'translate-x-6' : 'translate-x-1'}`} />
        </button>
    );
};

export function ApiKeyManager({ providerStatus, onProviderStatusChange }: ApiKeyManagerProps): React.ReactNode {
    const [isOpen, setIsOpen] = useState(false);

    const handleToggle = (provider: Provider, enabled: boolean) => {
        onProviderStatusChange({ ...providerStatus, [provider]: enabled });
    };

    return (
        <div className="relative">
            <button onClick={() => setIsOpen(!isOpen)} className="flex items-center gap-2 px-3 py-1.5 text-sm font-semibold bg-slate-700/50 text-slate-300 rounded-md hover:bg-slate-700 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M15 7h2a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V9a2 2 0 012-2h2m4-5v12m-3-7l3 3 3-3" />
                </svg>
                Manage Keys
            </button>
            {isOpen && (
                <div className="absolute right-0 top-full mt-2 w-64 bg-slate-800 border border-slate-700 rounded-md shadow-lg z-30 p-4">
                    <div className="flex justify-between items-center mb-3">
                        <h3 className="font-semibold text-slate-200">AI Provider Status</h3>
                        <button onClick={() => setIsOpen(false)} className="text-slate-500 hover:text-white">&times;</button>
                    </div>
                    <p className="text-xs text-slate-400 mb-4">Enable or disable AI providers. Disabled providers will not be used.</p>
                    <div className="space-y-3">
                        {providers.map(provider => (
                            <div key={provider} className="flex justify-between items-center">
                                <span className="text-sm font-medium text-slate-300">{provider}</span>
                                <Toggle enabled={providerStatus[provider]} onChange={(enabled) => handleToggle(provider, enabled)} />
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/ApiKeyManager.tsx

// START ./wp-plugin-bonsai/src/components/CodeResultViewer.tsx
import React, { useState } from 'react';
import JSZip from 'jszip';

interface File {
    fileName: string;
    code: string;
}

interface CodeResultViewerProps {
    files: File[];
    title: string;
    defaultZipName?: string;
    zipRootFolder?: string;
}

export function CodeResultViewer({ files, title, defaultZipName = 'code-result.zip', zipRootFolder }: CodeResultViewerProps): React.ReactNode {
    const [selectedFile, setSelectedFile] = useState<File | null>(files[0] || null);
    const [copied, setCopied] = useState(false);

    const handleCopy = () => {
        if (selectedFile) {
            navigator.clipboard.writeText(selectedFile.code);
            setCopied(true);
            setTimeout(() => setCopied(false), 2000);
        }
    };
    
    const handleDownload = async () => {
        const fileName = window.prompt("Enter a filename for the download:", defaultZipName);
        if (!fileName) return; // User cancelled
        
        const zip = new JSZip();
        const folder = zipRootFolder ? zip.folder(zipRootFolder) : zip;
        if (folder) {
            files.forEach(file => { folder.file(file.fileName, file.code); });
        }
        
        const blob = await zip.generateAsync({ type: "blob" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        link.click();
        URL.revokeObjectURL(link.href);
    };

    return (
        <div className="bg-slate-800/50 border border-slate-700 rounded-lg">
            <div className="flex flex-col sm:flex-row justify-between items-center gap-4 bg-slate-900/50 p-4 rounded-t-lg">
                <div>
                    <h2 className="text-xl font-bold text-emerald-400">{title}</h2>
                    <p className="text-sm text-slate-400">{files.length} files generated.</p>
                </div>
                <button onClick={handleDownload} className="px-6 py-2 bg-emerald-600 text-white font-bold rounded-lg hover:bg-emerald-500 transition-colors shadow-lg shadow-emerald-600/30">Download as Zip</button>
            </div>
            <div className="flex flex-col md:flex-row h-[60vh]">
                <div className="w-full md:w-1/3 lg:w-1/4 p-2 border-b md:border-r md:border-b-0 border-slate-700 overflow-y-auto">
                    <h3 className="text-sm font-semibold text-slate-300 p-2">File Explorer</h3>
                    <ul>
                        {files.map(file => (
                            <li key={file.fileName}>
                                <button onClick={() => setSelectedFile(file)} className={`w-full text-left text-xs font-mono p-2 rounded-md ${selectedFile?.fileName === file.fileName ? 'bg-indigo-600/30 text-indigo-300' : 'text-slate-400 hover:bg-slate-700/50'}`}>
                                    {file.fileName}
                                </button>
                            </li>
                        ))}
                    </ul>
                </div>
                <div className="w-full md:w-2/3 lg:w-3/4 flex flex-col">
                    {selectedFile ? (
                        <>
                            <div className="flex justify-between items-center p-2 bg-slate-800 border-b border-slate-700">
                                <span className="font-mono text-sm text-sky-300">{selectedFile.fileName}</span>
                                <button onClick={handleCopy} className="text-sm font-semibold text-slate-300 hover:text-white transition-colors">{copied ? 'Copied!' : 'Copy Code'}</button>
                            </div>
                            <pre className="p-4 text-sm text-slate-300 font-mono whitespace-pre-wrap overflow-auto flex-grow bg-slate-900/50"><code>{selectedFile.code}</code></pre>
                        </>
                    ) : (
                        <div className="flex items-center justify-center h-full text-slate-500">Select a file to view its content.</div>
                    )}
                </div>
            </div>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/CodeResultViewer.tsx

// START ./wp-plugin-bonsai/src/components/ConfirmationModal.tsx
import React from 'react';
import { ConfirmationState } from '@/types';

interface ConfirmationModalProps {
    confirmation: ConfirmationState | null;
}

export function ConfirmationModal({ confirmation }: ConfirmationModalProps): React.ReactNode {
    if (!confirmation) return null;

    return (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
            <div className="bg-slate-800 border border-slate-700 rounded-lg shadow-2xl w-full max-w-md">
                <div className="p-6">
                    <h3 className="font-semibold text-lg text-slate-100">Confirm Action</h3>
                    <p className="text-slate-400 mt-2">{confirmation.message}</p>
                </div>
                <div className="p-4 bg-slate-900/50 rounded-b-lg flex justify-end gap-4">
                    <button onClick={confirmation.onCancel} className="px-4 py-2 bg-slate-600 text-white font-semibold rounded-md hover:bg-slate-500 transition-colors">
                        Cancel
                    </button>
                    <button onClick={confirmation.onConfirm} className="px-4 py-2 bg-red-600 text-white font-semibold rounded-md hover:bg-red-500 transition-colors">
                        Confirm
                    </button>
                </div>
            </div>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/ConfirmationModal.tsx

// START ./wp-plugin-bonsai/src/components/EmptyState.tsx
import React from 'react';
import type { AppMode } from '@/types';

interface EmptyStateProps {
    mode: AppMode | 'results' | 'plugin-packager';
}

const config = {
    'wordpress': {
        title: "WordPress Plugin Reviewer",
        description: "Upload at least one plugin zip file to analyze it for security, performance, and best practice issues.",
    },
    'file-editor': {
        title: "File Editor & Fixer",
        description: "Upload or paste code into the editor to start analyzing and fixing a single file.",
    },
    'integration': {
        title: "Integration Builder",
        description: "Describe an integration you want to build between WordPress and Google Workspace in the prompt box above.",
    },
    'plugin-builder': {
        title: "WordPress Plugin Builder",
        description: "Start the conversation by describing the plugin you want to create. You can also upload a file for the AI to use as context.",
    },
    'plugin-packager': {
        title: "WordPress Plugin Packager",
        description: "Upload your plugin's files (or a zip archive) and the AI will organize them into a complete, installable plugin.",
    },
    'results': {
        title: "All Clear!",
        description: "The analysis completed successfully and no issues were found. Great job!",
    }
}

export function EmptyState({ mode }: EmptyStateProps): React.ReactNode {
    const { title, description } = config[mode] || {};

    return (
        <div className="text-center p-8 bg-slate-800/50 border-2 border-dashed border-slate-700 rounded-lg my-8">
            <h2 className={`text-2xl font-bold ${mode === 'results' ? 'text-emerald-400' : 'text-slate-200'}`}>{title}</h2>
            <p className="text-slate-400 mt-2 max-w-xl mx-auto">{description}</p>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/EmptyState.tsx

// START ./wp-plugin-bonsai/src/components/FileEditor.tsx
import React, { useRef, useEffect } from 'react';
import { Plugin, Workspace, PluginFile, AIModel } from '@/types';
import { ModelSelector } from '@/components/ModelSelector';
import { HistoryControls } from '@/components/HistoryControls';
import { EmptyState } from '@/components/EmptyState';
import { Loader } from '@/components/Loader';

interface FileEditorProps {
  workspace: Workspace;
  onUpdatePlugins: (updater: (plugins: Plugin[]) => Plugin[]) => void;
  onReview: () => void;
  isActionDisabled: boolean;
  mainButtonText: string;
  onModelChange: (modelId: string) => void;
  onUndo: () => void;
  onRedo: () => void;
  enabledModels: AIModel[];
}

export function FileEditor({ workspace, onUpdatePlugins, onReview, isActionDisabled, mainButtonText, onModelChange, onUndo, onRedo, enabledModels }: FileEditorProps): React.ReactNode {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const file = workspace.plugins[0]?.files[0];

  useEffect(() => {
    if (!file) {
        onUpdatePlugins(() => [{ id: 'file-editor-plugin', name: 'Single File Editor', zipName: null, files: [{ id: 'file-editor-file', name: 'untitled.php', code: '<?php\n\n// Paste your code here.', modified: false }] }]);
    }
  }, [file, onUpdatePlugins]);

  const updateFile = (updates: Partial<PluginFile>) => {
    onUpdatePlugins((plugins) => [{ ...plugins[0], files: [{ ...plugins[0].files[0], ...updates }] }]);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const uploadedFile = e.target.files?.[0];
    if (uploadedFile) {
      const reader = new FileReader();
      reader.onload = (event) => updateFile({ name: uploadedFile.name, code: event.target?.result as string, modified: false });
      reader.readAsText(uploadedFile);
    }
  };
  
  const handleDownload = () => {
    if (!file) return;
    const fileName = window.prompt("Enter a filename for the download:", file.name);
    if (!fileName) return; // User cancelled
    
    const blob = new Blob([file.code], { type: 'text/plain' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = fileName;
    link.click();
    URL.revokeObjectURL(link.href);
  };

  if (!file) return <Loader message="Loading editor..." />;

  const hasContent = file.code.trim() !== '' && file.code.trim() !== '<?php\n\n// Paste your code here.';
  const reviewDisabled = isActionDisabled || enabledModels.length === 0;

  return (
    <div className="max-w-7xl mx-auto flex flex-col">
      {!hasContent && <EmptyState mode="file-editor" />}
      <div className="flex-grow">
        <div className="flex justify-between items-center mb-4 flex-wrap gap-2">
             <h2 className="text-xl font-bold text-slate-100">Code Editor</h2>
             <div className="flex items-center gap-2">
                <input type="text" value={file.name} onChange={(e) => updateFile({ name: e.target.value })} className="bg-slate-700 text-sm text-slate-300 font-mono px-2 py-1 rounded-md w-48 focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                <input type="file" ref={fileInputRef} onChange={handleFileChange} className="hidden" />
                <button onClick={() => fileInputRef.current?.click()} className="px-3 py-1.5 text-sm font-semibold bg-slate-700 text-slate-300 rounded-md hover:bg-slate-600">Upload</button>
                <button onClick={handleDownload} className="px-3 py-1.5 text-sm font-semibold bg-emerald-600 text-white rounded-md hover:bg-emerald-500">Download</button>
             </div>
        </div>
        <textarea value={file.code} onChange={(e) => updateFile({ code: e.target.value, modified: true })} className="w-full h-[60vh] p-4 bg-slate-800 border border-slate-700 rounded-lg text-slate-300 font-mono text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
        <div className="mt-4 flex flex-col sm:flex-row items-center justify-center gap-4">
            <HistoryControls onUndo={onUndo} onRedo={onRedo} canUndo={workspace.historyIndex > 0} canRedo={workspace.historyIndex < workspace.history.length - 1} />
            <ModelSelector models={enabledModels} selectedModelId={workspace.selectedModelId} onModelChange={onModelChange} disabled={isActionDisabled} />
            <button onClick={onReview} disabled={reviewDisabled} title={enabledModels.length === 0 ? "Please enable at least one AI provider" : ""} className="px-8 py-3 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-500 disabled:bg-indigo-800 transition-colors shadow-lg shadow-indigo-600/30">{mainButtonText}</button>
        </div>
      </div>
    </div>
  );
}
// END ./wp-plugin-bonsai/src/components/FileEditor.tsx

// START ./wp-plugin-bonsai/src/components/Footer.tsx
import React from 'react';

interface FooterProps {
  isOnline: boolean;
}

export function Footer({ isOnline }: FooterProps): React.ReactNode {
  return (
    <footer className="text-center py-4 px-4 text-slate-500 text-sm border-t border-slate-700/50">
      <div className="container mx-auto flex justify-between items-center">
        <p>AI models by Google, OpenAI, and Anthropic</p>
        <div className="flex items-center gap-2">
          <span className={`h-2 w-2 rounded-full ${isOnline ? 'bg-emerald-400' : 'bg-red-500'}`}></span>
          <span>{isOnline ? 'Online' : 'Offline'}</span>
        </div>
      </div>
    </footer>
  );
}
// END ./wp-plugin-bonsai/src/components/Footer.tsx

// START ./wp-plugin-bonsai/src/components/Header.tsx
import React from 'react';

interface HeaderProps {
    children: React.ReactNode;
}

export function Header({ children }: HeaderProps): React.ReactNode {
  return (
    <header className="py-2 px-4 bg-slate-900/60 backdrop-blur-sm border-b border-slate-700/50 sticky top-0 z-20">
      <div className="container mx-auto flex items-center justify-between flex-wrap gap-2">
        <div className="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-emerald-400 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="1.5">
              <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.562L16.5 21.75l-.398-1.188a3.375 3.375 0 00-2.455-2.456L12.75 18l1.188-.398a3.375 3.375 0 002.455-2.456L16.5 14.25l.398 1.188a3.375 3.375 0 002.456 2.456L20.25 18l-1.188.398a3.375 3.375 0 00-2.456 2.456z" />
            </svg>
            <h1 className="text-xl font-bold text-slate-100 tracking-tight">
             WP Plugin Bonsai
            </h1>
        </div>
        <div className="flex items-center gap-2 flex-wrap justify-end">
          {children}
        </div>
      </div>
    </header>
  );
}
// END ./wp-plugin-bonsai/src/components/Header.tsx

// START ./wp-plugin-bonsai/src/components/HistoryControls.tsx
import React from 'react';

interface HistoryControlsProps {
    onUndo: () => void;
    onRedo: () => void;
    canUndo: boolean;
    canRedo: boolean;
}

export function HistoryControls({ onUndo, onRedo, canUndo, canRedo }: HistoryControlsProps): React.ReactNode {
    return (
        <div className="flex items-center gap-2">
            <button
                onClick={onUndo}
                disabled={!canUndo}
                title="Undo (Ctrl+Z)"
                className="p-2 bg-slate-700 text-slate-300 rounded-md hover:bg-slate-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z" />
                </svg>
            </button>
            <button
                onClick={onRedo}
                disabled={!canRedo}
                title="Redo (Ctrl+Y)"
                className="p-2 bg-slate-700 text-slate-300 rounded-md hover:bg-slate-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M13 15l3-3m0 0l-3-3m3 3H5m14 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </button>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/HistoryControls.tsx

// START ./wp-plugin-bonsai/src/components/IntegrationBuilder.tsx
import React, { useState, useCallback } from 'react';
import jsPDF from 'jspdf';
import { generateIntegration } from '@/services/aiService';
import { Loader } from '@/components/Loader';
import { ModelSelector } from '@/components/ModelSelector';
import type { IntegrationResponse, AIModel, ProviderStatus } from '@/types';
import { CodeResultViewer } from '@/components/CodeResultViewer';
import { EmptyState } from '@/components/EmptyState';

interface IntegrationBuilderProps {
    providerStatus: ProviderStatus;
    enabledModels: AIModel[];
}

export function IntegrationBuilder({ providerStatus, enabledModels }: IntegrationBuilderProps): React.ReactNode {
    const [prompt, setPrompt] = useState<string>('');
    const [status, setStatus] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [result, setResult] = useState<IntegrationResponse | null>(null);
    const [selectedModelId, setSelectedModelId] = useState<string>(enabledModels[0]?.id || '');

    const handleSubmit = useCallback(async () => {
        if (!prompt.trim()) { setError('Please describe the integration you want to build.'); return; }
        setStatus('Generating integration...');
        setError(null);
        setResult(null);
        try {
            const response = await generateIntegration(prompt, selectedModelId, providerStatus, setStatus);
            setResult(response);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred.');
        } finally {
            setStatus(null);
        }
    }, [prompt, selectedModelId, providerStatus]);
    
    const isLoading = !!status;
    const isActionDisabled = isLoading || enabledModels.length === 0;

    const downloadAs = (format: 'txt' | 'html' | 'pdf') => {
        if (!result) return;
        const filename = promptForFilename(`instructions.${format}`);
        if (!filename) return;

        if (format === 'pdf') {
            const doc = new jsPDF();
            doc.text(result.instructions, 10, 10, { maxWidth: 180 });
            doc.save(filename);
            return;
        }

        const element = document.createElement('a');
        let file;
        if (format === 'html') {
            const htmlContent = `<!DOCTYPE html><html><head><title>Integration Instructions</title><style>body{font-family:sans-serif;line-height:1.6;padding:20px;white-space:pre-wrap;}</style></head><body><h1>Instructions</h1><p>${result.instructions.replace(/\n/g, '<br>')}</p></body></html>`;
            file = new Blob([htmlContent], { type: 'text/html' });
        } else {
            file = new Blob([result.instructions], { type: 'text/plain' });
        }
        element.href = URL.createObjectURL(file);
        element.download = filename;
        element.click();
        URL.revokeObjectURL(element.href);
    };

    const promptForFilename = (defaultName: string): string | null => {
        return window.prompt("Enter a filename for the download:", defaultName);
    };
    
    const getResultFiles = () => {
        if (!result) return [];
        const files = [];
        if (result.workspaceScript) files.push({ fileName: result.workspaceScript.fileName, code: result.workspaceScript.code });
        if (result.manifestFile) files.push({ fileName: result.manifestFile.fileName, code: result.manifestFile.code });
        if (result.wordpressCode) files.push(...result.wordpressCode.map(f => ({ fileName: f.fileName, code: f.code })));
        return files;
    };

    return (
        <div className="max-w-4xl mx-auto">
            {!result && !isLoading && !error && <EmptyState mode="integration" />}
            <div className="bg-slate-800 border border-slate-700 rounded-lg p-6 shadow-lg">
                <textarea value={prompt} onChange={(e) => setPrompt(e.target.value)} placeholder="e.g., When a new WooCommerce order is placed, add a row to my Google Sheet..." className="w-full h-32 p-3 bg-slate-900 border border-slate-600 rounded-md text-slate-300 focus:outline-none focus:ring-2 focus:ring-indigo-500" disabled={isLoading} />
                <div className="mt-4 flex flex-col sm:flex-row justify-end items-center gap-4">
                    <ModelSelector models={enabledModels} selectedModelId={selectedModelId} onModelChange={setSelectedModelId} disabled={isActionDisabled} />
                    <button onClick={handleSubmit} disabled={isActionDisabled} title={enabledModels.length === 0 ? "Please enable at least one AI provider" : ""} className="px-8 py-3 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-500 disabled:bg-indigo-800 transition-colors shadow-lg shadow-indigo-600/30">{isLoading ? (status || 'Generating...') : 'Build Integration'}</button>
                </div>
            </div>

            <div className="mt-12">
                {isLoading && <Loader message={status}/>}
                {error && <div className="relative text-center p-4 bg-red-900/50 border border-red-500 rounded-lg">{error}<button onClick={() => setError(null)} className="absolute top-2 right-2 text-red-300 hover:text-white">&times;</button></div>}
                {result && (
                    <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6">
                       <h2 className="text-2xl font-bold text-emerald-400 mb-6">Your Integration is Ready!</h2>
                       {getResultFiles().length > 0 && <CodeResultViewer files={getResultFiles()} title="Generated Code" />}
                       <div className="mt-6">
                            <div className="flex justify-between items-center mb-4 flex-wrap gap-2">
                                <h3 className="text-xl font-semibold text-slate-200">Unified Setup Instructions</h3>
                                <div className="flex items-center gap-2">
                                    <span className="text-sm text-slate-400">Download as:</span>
                                    <button onClick={() => downloadAs('txt')} className="text-xs font-semibold bg-slate-700 px-2 py-1 rounded hover:bg-slate-600">TXT</button>
                                    <button onClick={() => downloadAs('html')} className="text-xs font-semibold bg-slate-700 px-2 py-1 rounded hover:bg-slate-600">HTML</button>
                                    <button onClick={() => downloadAs('pdf')} className="text-xs font-semibold bg-slate-700 px-2 py-1 rounded hover:bg-slate-600">PDF</button>
                                </div>
                            </div>
                            <div className="prose prose-slate prose-invert max-w-none p-4 border border-slate-700 rounded-lg whitespace-pre-wrap">{result.instructions}</div>
                       </div>
                    </div>
                )}
            </div>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/IntegrationBuilder.tsx

// START ./wp-plugin-bonsai/src/components/Loader.tsx
import React from 'react';

interface LoaderProps {
  message?: string | null;
}

export function Loader({ message = 'AI is processing your request...' }: LoaderProps): React.ReactNode {
  return (
    <div className="flex flex-col items-center justify-center p-8">
      <svg className="animate-spin h-10 w-10 text-indigo-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p className="mt-4 text-slate-400 text-center">{message}</p>
    </div>
  );
}
// END ./wp-plugin-bonsai/src/components/Loader.tsx

// START ./wp-plugin-bonsai/src/components/ModeSwitcher.tsx
import React from 'react';
import type { AppMode } from '@/types';

interface ModeSwitcherProps {
    currentMode: AppMode;
    onModeChange: (mode: AppMode) => void;
}

const ModeButton: React.FC<{ mode: AppMode; currentMode: AppMode; onModeChange: (mode: AppMode) => void; children: React.ReactNode; }> = ({ mode, currentMode, onModeChange, children }) => {
    const baseClasses = "px-3 py-1.5 text-xs sm:px-4 sm:py-2 sm:text-sm font-semibold rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-800 focus:ring-indigo-500";
    const activeClasses = "bg-indigo-600 text-white shadow";
    const inactiveClasses = "bg-slate-700/50 text-slate-300 hover:bg-slate-700";
    return <button onClick={() => onModeChange(mode)} className={`${baseClasses} ${currentMode === mode ? activeClasses : inactiveClasses}`}>{children}</button>
}

export function ModeSwitcher({ currentMode, onModeChange }: ModeSwitcherProps): React.ReactNode {
    return (
        <div className="flex items-center p-1 bg-slate-800 rounded-lg flex-wrap">
            <ModeButton mode="file-editor" currentMode={currentMode} onModeChange={onModeChange}>File Editor</ModeButton>
            <ModeButton mode="wordpress" currentMode={currentMode} onModeChange={onModeChange}>WP Reviewer</ModeButton>
            <ModeButton mode="integration" currentMode={currentMode} onModeChange={onModeChange}>Integration Builder</ModeButton>
            <ModeButton mode="plugin-builder" currentMode={currentMode} onModeChange={onModeChange}>Plugin Builder</ModeButton>
            <ModeButton mode="plugin-packager" currentMode={currentMode} onModeChange={onModeChange}>Plugin Packager</ModeButton>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/ModeSwitcher.tsx

// START ./wp-plugin-bonsai/src/components/ModelSelector.tsx
import React from 'react';
import type { AIModel } from '@/types';

interface ModelSelectorProps {
  models: AIModel[];
  selectedModelId: string;
  onModelChange: (modelId: string) => void;
  disabled: boolean;
}

export function ModelSelector({ models, selectedModelId, onModelChange, disabled }: ModelSelectorProps): React.ReactNode {
  return (
    <div className="flex items-center gap-2">
      <label htmlFor="model-select" className="text-sm font-medium text-slate-400">
        AI Model:
      </label>
      <select
        id="model-select"
        value={selectedModelId}
        onChange={(e) => onModelChange(e.target.value)}
        disabled={disabled}
        className="bg-slate-700 border border-slate-600 text-white text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 disabled:opacity-50"
      >
        {models.map((model) => (
          <option key={model.id} value={model.id}>
            {model.name} ({model.provider})
          </option>
        ))}
      </select>
    </div>
  );
}
// END ./wp-plugin-bonsai/src/components/ModelSelector.tsx

// START ./wp-plugin-bonsai/src/components/MultiPluginUploader.tsx
import React, { useRef } from 'react';
import type { Plugin } from '@/types';
import { getFileIcon } from '@/components/icons/FileIcons';

interface MultiPluginUploaderProps {
  plugins: Plugin[];
  onPluginNameChange: (pluginId: string, newName: string) => void;
  onAddPlugin: () => void;
  onRemovePlugin: (id: string) => void;
  onZipUpload: (pluginId: string, file: File) => void;
  onDownloadPlugin: (pluginId: string) => void;
  onGenerateFile: (pluginId: string) => void;
  uploadingPluginId: string | null;
  isActionDisabled: boolean;
}

const FileList: React.FC<{ plugin: Plugin }> = ({ plugin }) => {
  return (
    <div className="max-h-48 overflow-y-auto p-2">
      <ul className="text-sm space-y-1">
        {plugin.files.map(file => (
          <li key={file.id} className="text-slate-400 font-mono text-xs flex items-center bg-slate-700/30 p-1.5 rounded">
            {getFileIcon(file.name)}
            <span className="truncate" title={file.name}>{file.name}</span>
            {file.modified && <span className="ml-auto text-xs font-semibold text-indigo-300 bg-indigo-500/20 px-2 py-0.5 rounded-full">Modified</span>}
          </li>
        ))}
      </ul>
    </div>
  );
};

interface PluginCardProps {
  plugin: Plugin;
  index: number;
  pluginsLength: number;
  onPluginNameChange: (pluginId: string, newName: string) => void;
  onRemovePlugin: (id: string) => void;
  onZipUpload: (pluginId: string, file: File) => void;
  onDownloadPlugin: (pluginId: string) => void;
  onGenerateFile: (pluginId: string) => void;
  isUploading: boolean;
  isActionDisabled: boolean;
}

const PluginCard: React.FC<PluginCardProps> = ({ plugin, index, pluginsLength, onPluginNameChange, onRemovePlugin, onZipUpload, onDownloadPlugin, onGenerateFile, isUploading, isActionDisabled }) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => event.target.files?.[0] && onZipUpload(plugin.id, event.target.files[0]);
  const hasFiles = plugin.files.length > 0;

  return (
    <div className="bg-slate-800 border border-slate-700 rounded-lg shadow-lg flex flex-col">
      <div className="flex items-center justify-between p-3 border-b border-slate-700 bg-slate-900/30 rounded-t-lg">
        <input type="text" value={plugin.name} onChange={(e) => onPluginNameChange(plugin.id, e.target.value)} className="w-full bg-transparent text-slate-100 font-semibold focus:outline-none" placeholder={`Plugin ${index + 1} Name`} />
        <button onClick={() => onRemovePlugin(plugin.id)} disabled={pluginsLength <= 2} className="ml-2 text-slate-500 hover:text-red-400 disabled:text-slate-600 disabled:cursor-not-allowed transition-colors" aria-label="Remove Plugin"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg></button>
      </div>
      <div className="flex-grow p-4 flex flex-col justify-between">
        <div>
          <button onClick={() => fileInputRef.current?.click()} disabled={isUploading} className="w-full flex items-center justify-center px-4 py-2 border-2 border-dashed border-slate-600 rounded-md text-slate-400 hover:border-indigo-500 hover:text-indigo-400 transition-colors disabled:opacity-50">
            {isUploading ? <><svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Processing...</> : <><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" /></svg>Upload Zip</>}
          </button>
          <input type="file" ref={fileInputRef} onChange={handleFileSelect} accept=".zip" className="hidden" />
          {plugin.zipName && <p className="text-center text-sm text-slate-400 mt-3 bg-slate-700/50 py-1 px-2 rounded-md truncate" title={plugin.zipName}>{plugin.zipName}</p>}
        </div>
        <div className="mt-4 border-t border-slate-700 pt-3"><h4 className="text-sm font-semibold text-slate-300 mb-2">Code Files:</h4>{hasFiles ? <FileList plugin={plugin} /> : <p className="text-sm text-slate-500 px-2 py-2">Upload a zip to see files.</p>}</div>
      </div>
       {hasFiles && (
        <div className="p-3 border-t border-slate-700 bg-slate-900/30 rounded-b-lg space-y-2">
            <button onClick={() => onGenerateFile(plugin.id)} disabled={isActionDisabled} className="w-full flex items-center justify-center px-4 py-2 bg-sky-600 text-white font-semibold rounded-md hover:bg-sky-500 transition-colors disabled:bg-sky-800/50 disabled:cursor-not-allowed">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" /></svg>
                Generate File
            </button>
            <button onClick={() => onDownloadPlugin(plugin.id)} disabled={isActionDisabled} className="w-full flex items-center justify-center px-4 py-2 bg-emerald-600 text-white font-semibold rounded-md hover:bg-emerald-500 transition-colors disabled:bg-emerald-800/50 disabled:cursor-not-allowed">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>
                Download Plugin
            </button>
        </div>
      )}
    </div>
  );
};

export function MultiPluginUploader(props: MultiPluginUploaderProps): React.ReactNode {
  const { plugins, onAddPlugin, uploadingPluginId, ...rest } = props;
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {plugins.map((plugin, index) => <PluginCard key={plugin.id} plugin={plugin} index={index} pluginsLength={plugins.length} isUploading={uploadingPluginId === plugin.id} {...rest} />)}
      </div>
      <div className="flex justify-center">
        <button onClick={onAddPlugin} disabled={plugins.length >= 10 || props.isActionDisabled} className="px-6 py-2 border-2 border-dashed border-slate-600 text-slate-400 font-semibold rounded-lg hover:bg-slate-700/50 hover:text-slate-300 hover:border-slate-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all">
          Add Plugin ({plugins.length}/10)
        </button>
      </div>
    </div>
  );
}
// END ./wp-plugin-bonsai/src/components/MultiPluginUploader.tsx

// START ./wp-plugin-bonsai/src/components/PluginBuilder.tsx
import React, { useState, useCallback, useRef, useEffect } from 'react';
import { buildPlugin, generateBlueprint, continuePluginChat } from '@/services/aiService';
import { Loader } from '@/components/Loader';
import { ModelSelector } from '@/components/ModelSelector';
import type { PluginBuildResponse, BlueprintResponse, ChatMessage, AIModel, ProviderStatus } from '@/types';
import { CodeResultViewer } from '@/components/CodeResultViewer';
import { EmptyState } from '@/components/EmptyState';

interface PluginBuilderProps {
    providerStatus: ProviderStatus;
    enabledModels: AIModel[];
}

const ChatMessageBubble: React.FC<{ message: ChatMessage }> = ({ message }) => {
    const isModel = message.role === 'model';
    const wrapperClasses = `flex w-full ${isModel ? 'justify-start' : 'justify-end'}`;
    const bubbleClasses = `max-w-xl p-3 rounded-lg shadow whitespace-pre-wrap ${isModel ? 'bg-slate-700 text-slate-200' : 'bg-indigo-600 text-white'}`;
    const codeBlockClasses = "block p-2 my-2 bg-slate-900/70 border border-slate-600 rounded-md font-mono text-xs overflow-x-auto";

    const contentWithCodeStyles = message.content.split(/```(\w+)?\n([\s\S]+?)```/g).map((part, index) => {
        if (index % 3 === 2) return <pre key={index} className={codeBlockClasses}><code>{part}</code></pre>;
        if (index % 3 === 1 || (index % 3 === 0 && part.trim() === '')) return null;
        return part;
    });

    return (
        <div className={wrapperClasses}>
            <div className={bubbleClasses}>{contentWithCodeStyles}</div>
        </div>
    );
};

export function PluginBuilder({ providerStatus, enabledModels }: PluginBuilderProps): React.ReactNode {
    const [messages, setMessages] = useState<ChatMessage[]>([
        { role: 'model', content: "Hello! I'm here to help you design a WordPress plugin. What would you like to build?" }
    ]);
    const [status, setStatus] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [result, setResult] = useState<PluginBuildResponse | null>(null);
    const [blueprint, setBlueprint] = useState<BlueprintResponse | null>(null);
    const [selectedModelId, setSelectedModelId] = useState<string>(enabledModels[0]?.id || '');
    const [isTyping, setIsTyping] = useState(false);
    const [userInput, setUserInput] = useState('');
    const [inputFile, setInputFile] = useState<{ name: string, content: string } | null>(null);

    const chatContainerRef = useRef<HTMLDivElement>(null);
    const fileInputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        if (chatContainerRef.current) {
            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
    }, [messages, isTyping]);
    
    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (event) => {
                const content = event.target?.result as string;
                setInputFile({ name: file.name, content });
                const userMessage: ChatMessage = { role: 'user', content: `I've uploaded a file named "${file.name}" to use as the starting point for our plugin. Please analyze it and let's begin designing.` };
                const newMessages = [...messages, userMessage];
                setMessages(newMessages);
                sendMessageToServer(newMessages);
            };
            reader.readAsText(file);
        }
        if (e.target) e.target.value = ''; // Reset file input
    };

    const sendMessageToServer = async (currentMessages: ChatMessage[]) => {
        setIsTyping(true);
        setError(null);
        try {
            const response = await continuePluginChat(currentMessages, selectedModelId, providerStatus, setStatus);
            setMessages(prev => [...prev, { role: 'model', content: response }]);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An error occurred.');
        } finally {
            setIsTyping(false);
        }
    };

    const handleSendMessage = (e: React.FormEvent) => {
        e.preventDefault();
        if (!userInput.trim() || isTyping) return;
        const userMessage: ChatMessage = { role: 'user', content: userInput };
        const newMessages = [...messages, userMessage];
        setMessages(newMessages);
        sendMessageToServer(newMessages);
        setUserInput('');
    };

    const handleGenerateBlueprint = useCallback(async () => {
        if (messages.length <= 1) { setError('Please describe the plugin first.'); return; }
        setStatus('Generating blueprint...');
        setError(null);
        setBlueprint(null);
        setResult(null);
        try {
            setBlueprint(await generateBlueprint(messages, selectedModelId, providerStatus, setStatus));
        } catch (err) { setError(err instanceof Error ? err.message : 'An error occurred.'); } 
        finally { setStatus(null); }
    }, [messages, selectedModelId, providerStatus]);

    const handleBuildPlugin = useCallback(async () => {
        if (messages.length <= 1) { setError('Please describe the plugin first.'); return; }
        setStatus('Architecting and building plugin...');
        setError(null);
        setResult(null);
        setBlueprint(null);
        try {
            setResult(await buildPlugin(messages, inputFile, selectedModelId, providerStatus, setStatus));
        } catch (err) { setError(err instanceof Error ? err.message : 'An error occurred.'); } 
        finally { setStatus(null); }
    }, [messages, inputFile, selectedModelId, providerStatus]);
    
    const isLoading = !!status;
    const isActionDisabled = isLoading || isTyping || enabledModels.length === 0;

    return (
        <div className="max-w-4xl mx-auto">
            {!result && !blueprint && !isLoading && !error && messages.length <= 1 && <EmptyState mode="plugin-builder" />}
            
            <div className="bg-slate-800 border border-slate-700 rounded-lg shadow-lg flex flex-col h-[75vh]">
                <div ref={chatContainerRef} className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {messages.map((msg, index) => <ChatMessageBubble key={index} message={msg} />)}
                    {isTyping && <ChatMessageBubble message={{ role: 'model', content: 'Thinking...' }} />}
                </div>

                {inputFile && (
                    <div className="p-2 px-4 text-xs text-slate-400 border-t border-slate-700">
                        Using <span className="font-mono bg-slate-700/50 px-1 rounded">{inputFile.name}</span> as context. 
                        <button onClick={() => setInputFile(null)} className="ml-2 text-red-400 hover:text-red-300">[ remove ]</button>
                    </div>
                )}
                
                <form onSubmit={handleSendMessage} className="p-4 border-t border-slate-700 bg-slate-900/50 rounded-b-lg">
                    <div className="flex items-center gap-2">
                        <input ref={fileInputRef} id="file-upload" type="file" accept=".php,.json,.txt" onChange={handleFileSelect} className="hidden" />
                         <button type="button" onClick={() => fileInputRef.current?.click()} title="Upload File Context (PHP, JSON, TXT)" className="p-2 text-slate-400 hover:text-white cursor-pointer rounded-md hover:bg-slate-700" disabled={isActionDisabled}>
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" /></svg>
                        </button>
                        <input type="text" value={userInput} onChange={e => setUserInput(e.target.value)} placeholder="Type your message or upload a file..." className="w-full bg-slate-700 text-slate-200 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" disabled={isActionDisabled} />
                        <button type="submit" className="px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-500 disabled:bg-indigo-800" disabled={isActionDisabled || !userInput.trim()}>Send</button>
                    </div>
                </form>
            </div>
            
            <div className="mt-6 flex flex-col sm:flex-row justify-end items-center gap-4">
                <ModelSelector models={enabledModels} selectedModelId={selectedModelId} onModelChange={setSelectedModelId} disabled={isActionDisabled} />
                <button onClick={handleGenerateBlueprint} disabled={isActionDisabled} title={enabledModels.length === 0 ? "Please enable at least one AI provider" : ""} className="px-6 py-2 bg-sky-600 text-white font-semibold rounded-lg hover:bg-sky-500 disabled:bg-sky-800 transition-colors">Generate Blueprint</button>
                <button onClick={handleBuildPlugin} disabled={isActionDisabled} title={enabledModels.length === 0 ? "Please enable at least one AI provider" : ""} className="px-8 py-3 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-500 disabled:bg-indigo-800 transition-colors shadow-lg shadow-indigo-600/30">{isLoading ? (status || 'Building...') : 'Build Plugin'}</button>
            </div>

            <div className="mt-12">
                {isLoading && <Loader message={status}/>}
                {error && <div className="relative text-center p-4 bg-red-900/50 border border-red-500 rounded-lg">{error}<button onClick={() => setError(null)} className="absolute top-2 right-2 text-red-300 hover:text-white">&times;</button></div>}
                {blueprint && <div className="bg-slate-800/50 border border-slate-700 rounded-lg p-6"><h2 className="text-2xl font-bold text-sky-400 mb-4">Architectural Blueprint</h2><div><h3 className="text-lg font-semibold mt-4 mb-2">File Structure</h3><pre className="p-3 bg-slate-900 rounded-md text-sm whitespace-pre-wrap font-mono">{blueprint.fileStructure}</pre></div><div><h3 className="text-lg font-semibold mt-4 mb-2">Plan</h3><p className="whitespace-pre-wrap p-3 bg-slate-900 rounded-md text-sm">{blueprint.plan}</p></div></div>}
                {result && <CodeResultViewer files={result.files} title="Generated Plugin" defaultZipName={`${result.pluginName}-v1.0.0.zip`} zipRootFolder={result.pluginName} />}
            </div>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/PluginBuilder.tsx

// START ./wp-plugin-bonsai/src/components/PluginPackager.tsx
import React, { useState, useCallback, useRef } from 'react';
import JSZip from 'jszip';
import { packagePlugin } from '@/services/aiService';
import { Loader } from '@/components/Loader';
import { ModelSelector } from '@/components/ModelSelector';
import { CodeResultViewer } from '@/components/CodeResultViewer';
import { EmptyState } from '@/components/EmptyState';
import { ProviderStatus } from '@/types';
import { analyzePackageContents, getBoilerplateUninstall } from '@/services/localPluginPackager';
import type { PluginBuildResponse, AIModel, UploadedFile } from '@/types';
import { getFileIcon } from '@/components/icons/FileIcons';

interface PluginPackagerProps {
    providerStatus: ProviderStatus;
    enabledModels: AIModel[];
}

export function PluginPackager({ providerStatus, enabledModels }: PluginPackagerProps): React.ReactNode {
    const [status, setStatus] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [result, setResult] = useState<PluginBuildResponse | null>(null);
    const [selectedModelId, setSelectedModelId] = useState<string>(enabledModels[0]?.id || '');
    const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
    const fileInputRef = useRef<HTMLInputElement>(null);

    const processFiles = async (files: FileList) => {
        const extracted: UploadedFile[] = [];
        for (const file of Array.from(files)) {
            if (file.name.toLowerCase().endsWith('.zip')) {
                const zip = await JSZip.loadAsync(file);
                for (const path in zip.files) {
                    const entry = zip.files[path];
                    if (!entry.dir) {
                        const content = await entry.async('string');
                        extracted.push({ name: path.split('/').pop()!, content, path });
                    }
                }
            } else {
                const content = await file.text();
                extracted.push({ name: file.name, content, path: file.name });
            }
        }
        setUploadedFiles(prev => [...prev, ...extracted]);
    };

    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files) {
            processFiles(e.target.files);
            if (e.target) e.target.value = ''; // Reset file input
        }
    };
    
    const handlePackage = useCallback(async () => {
        if (uploadedFiles.length === 0) { setError('Please upload some files or a folder.'); return; }
        
        setStatus('Running local analysis...');
        setError(null);
        setResult(null);

        // Step 1: Perform local analysis
        const analysis = analyzePackageContents(uploadedFiles);
        
        const filesForAI = [...uploadedFiles];
        // Step 2: Handle missing uninstall.php locally if needed
        if (!analysis.hasUninstall) {
            const boilerplate = getBoilerplateUninstall();
            filesForAI.push({ name: boilerplate.fileName, content: boilerplate.code, path: boilerplate.fileName });
            analysis.hasUninstall = true; // Update analysis for the prompt
            setStatus('Added boilerplate uninstall.php. Preparing AI prompt...');
        } else {
            setStatus('Preparing AI prompt...');
        }

        try {
            // Step 3: Call AI for structuring and generating other missing files (readme, main file)
            const filesToPackage = filesForAI.map(({ name, content }) => ({ name, content }));
            setResult(await packagePlugin(filesToPackage, analysis, selectedModelId, providerStatus, setStatus));
        } catch (err) { setError(err instanceof Error ? err.message : 'An error occurred.'); } 
        finally { setStatus(null); }
    }, [uploadedFiles, selectedModelId, providerStatus]);
    
    const isLoading = !!status;
    const isActionDisabled = isLoading || enabledModels.length === 0;

    return (
        <div className="max-w-4xl mx-auto">
            {!result && !isLoading && !error && uploadedFiles.length === 0 && <EmptyState mode="plugin-packager" />}
             <div className="bg-slate-800 border border-slate-700 rounded-lg p-6 shadow-lg space-y-6">
                 <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">1. Upload your plugin files or folder</label>
                    <p className="text-xs text-slate-400 mb-2">You can upload individual files, a .zip archive, or a whole folder. The AI will organize them.</p>
                    <div className="border-2 border-dashed border-slate-600 rounded-md p-6 text-center">
                        <input type="file" multiple ref={fileInputRef} onChange={handleFileSelect} id="packager-upload" className="hidden" />
                        <button onClick={() => fileInputRef.current?.click()} className="px-6 py-3 bg-slate-700/50 text-slate-300 font-semibold rounded-lg hover:bg-slate-700 transition-colors flex flex-col items-center justify-center w-full">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
                                <path strokeLinecap="round" strokeLinejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                            </svg>
                            <span className="text-sm">Click to Upload Files or Folder</span>
                        </button>
                    </div>
                    {uploadedFiles.length > 0 && (
                        <div className="mt-4">
                            <h3 className="text-sm font-medium text-slate-300 mb-2">Uploaded Files:</h3>
                            <ul className="max-h-40 overflow-y-auto bg-slate-900/50 rounded-md p-2 space-y-1">
                                {uploadedFiles.map((file, index) => (
                                    <li key={`${file.path}-${index}`} className="text-xs font-mono text-slate-400 flex justify-between items-center p-1.5 rounded bg-slate-700/30">
                                        <div className="flex items-center truncate">
                                            {getFileIcon(file.name)}
                                            <span className="truncate">{file.path}</span>
                                        </div>
                                        <button onClick={() => setUploadedFiles(files => files.filter((_, i) => i !== index))} className="text-slate-500 hover:text-red-400 ml-2 flex-shrink-0">&times;</button>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </div>
                <div className="mt-4 flex flex-col sm:flex-row justify-end items-center gap-4">
                    <ModelSelector models={enabledModels} selectedModelId={selectedModelId} onModelChange={setSelectedModelId} disabled={isActionDisabled} />
                    <button onClick={handlePackage} disabled={isActionDisabled} title={enabledModels.length === 0 ? "Please enable at least one AI provider" : ""} className="px-8 py-3 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-500 disabled:bg-indigo-800 transition-colors shadow-lg shadow-indigo-600/30">
                        {isLoading ? (status || 'Packaging...') : 'Package Plugin'}
                    </button>
                </div>
            </div>

            <div className="mt-12">
                {isLoading && <Loader message={status}/>}
                {error && <div className="relative text-center p-4 bg-red-900/50 border border-red-500 rounded-lg">{error}<button onClick={() => setError(null)} className="absolute top-2 right-2 text-red-300 hover:text-white">&times;</button></div>}
                {result && <CodeResultViewer files={result.files} title="Packaged Plugin" defaultZipName={`${result.pluginName}.zip`} zipRootFolder={result.pluginName} />}
            </div>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/PluginPackager.tsx

// START ./wp-plugin-bonsai/src/components/ReviewResults.tsx
import React, { useMemo, useState } from 'react';
import type { ReviewIssue } from '@/types';
import { IssueCategory, IssueSeverity } from '@/types';
import { SecurityIcon, PerformanceIcon, BestPracticesIcon, InteroperabilityIcon, CodeQualityIcon } from '@/components/icons/CategoryIcons';
import { CriticalIcon, WarningIcon, InfoIcon } from '@/components/icons/SeverityIcons';
import { EmptyState } from '@/components/EmptyState';

interface ReviewResultsProps {
  issues: ReviewIssue[];
  onApplyFix: (issue: ReviewIssue) => void;
  onApplyAllSafeFixes: () => void;
  applyingFixId: string | null;
  isBatching: boolean;
  isOnline: boolean;
}

const categoryConfig = {
  [IssueCategory.Security]: { Icon: SecurityIcon, color: 'text-red-400', title: 'Security', description: 'Protecting your site from hacks and data breaches.'},
  [IssueCategory.Performance]: { Icon: PerformanceIcon, color: 'text-amber-400', title: 'Performance', description: 'Keeping your website fast and responsive.'},
  [IssueCategory.BestPractices]: { Icon: BestPracticesIcon, color: 'text-sky-400', title: 'Best Practices', description: 'Ensuring code follows WordPress standards for stability.'},
  [IssueCategory.Interoperability]: { Icon: InteroperabilityIcon, color: 'text-emerald-400', title: 'Interoperability', description: 'Preventing conflicts with other plugins and themes.'},
  [IssueCategory.CodeQuality]: { Icon: CodeQualityIcon, color: 'text-purple-400', title: 'Code Quality', description: 'Improving code syntax, clarity, and fixing general errors.'},
};

const severityConfig = {
  [IssueSeverity.Critical]: { Icon: CriticalIcon, color: 'bg-red-500/20 text-red-400 border-red-500/30', label: 'Critical' },
  [IssueSeverity.Warning]: { Icon: WarningIcon, color: 'bg-amber-500/20 text-amber-400 border-amber-500/30', label: 'Warning' },
  [IssueSeverity.Info]: { Icon: InfoIcon, color: 'bg-sky-500/20 text-sky-400 border-sky-500/30', label: 'Info' },
};

const IssueCard: React.FC<{ 
  issue: ReviewIssue;
  onApplyFix: (issue: ReviewIssue) => void;
  isApplying: boolean;
  isDisabled: boolean;
  isOnline: boolean;
}> = ({ issue, onApplyFix, isApplying, isDisabled, isOnline }) => {
  const config = severityConfig[issue.severity] || severityConfig.Info;
  const canApplyFix = issue.source === 'AI Analysis';
  const [copied, setCopied] = useState(false);

  const handleCopy = () => {
    navigator.clipboard.writeText(issue.suggestion);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div className={`border-l-4 rounded-r-lg p-5 bg-slate-800/50 ${config.color}`}>
      <div className="flex justify-between items-start flex-wrap gap-2 mb-3">
        <div className="flex items-center gap-4">
            <div className="flex items-center"><config.Icon /> <span className="font-bold ml-2">{config.label}</span></div>
            {issue.source && (<span className={`text-xs font-semibold px-2 py-1 rounded-full ${issue.source === 'AI Analysis' ? 'bg-indigo-500/20 text-indigo-300' : 'bg-slate-700 text-slate-300'}`}>{issue.source}</span>)}
        </div>
        <div className="text-xs font-semibold text-slate-400 bg-slate-700/50 px-2 py-1 rounded-md">
          <span className="font-bold text-slate-300">{issue.pluginName}</span> / <span className="font-mono text-slate-300">{issue.fileName}</span>
        </div>
      </div>
      <p className="text-slate-300 mb-3">{issue.description}</p>
      
      <div className="mt-3 p-3 bg-slate-900/50 rounded-lg flex items-start">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-yellow-300 mr-3 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2"><path strokeLinecap="round" strokeLinejoin="round" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" /></svg>
        <div><h4 className="font-semibold text-slate-200">Impact</h4><p className="text-slate-400 text-sm">{issue.impact}</p></div>
      </div>

      <div className="mt-4 pt-4 border-t border-slate-700">
        <div className="flex justify-between items-start"><h4 className="font-semibold text-slate-200 mb-2">Suggestion:</h4>
            {canApplyFix && (
             <button onClick={() => onApplyFix(issue)} disabled={isApplying || isDisabled || !isOnline} title={!isOnline ? "Applying fixes requires an internet connection." : ""} className="flex items-center text-sm px-4 py-2 bg-slate-700/50 text-indigo-300 font-semibold rounded-md hover:bg-slate-700 disabled:bg-slate-800 disabled:text-slate-500 disabled:cursor-not-allowed transition-colors">
              {isApplying ? (<><svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Applying...</>) : 'Apply Fix'}
            </button>)}
        </div>
        <div className="relative group">
            <pre className="text-slate-400 font-mono text-sm bg-slate-900/70 p-3 rounded-md whitespace-pre-wrap">{issue.suggestion}</pre>
            <button onClick={handleCopy} className="absolute top-2 right-2 text-slate-400 bg-slate-800/50 p-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity">
                {copied ? <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" /></svg> : <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg>}
            </button>
        </div>
      </div>
    </div>
  );
};

export function ReviewResults({ issues, onApplyFix, onApplyAllSafeFixes, applyingFixId, isBatching, isOnline }: ReviewResultsProps): React.ReactNode {
  const groupedIssues = useMemo(() => {
    return issues.reduce((acc, issue) => {
      if (!acc[issue.category]) acc[issue.category] = [];
      acc[issue.category].push(issue);
      return acc;
    }, {} as Record<IssueCategory, ReviewIssue[]>);
  }, [issues]);
  
  const safeFixesCount = useMemo(() => issues.filter(issue => issue.severity === IssueSeverity.Info && issue.source === 'AI Analysis').length, [issues]);
  const orderedCategories = Object.values(IssueCategory);

  if (issues.length === 0) {
    return <EmptyState mode="results" />;
  }

  return (
    <div>
      <div className="flex flex-col sm:flex-row justify-between items-center mb-8 gap-4">
        <h2 className="text-3xl font-bold text-center">Review Results</h2>
        {safeFixesCount > 0 && isOnline && (
          <button onClick={onApplyAllSafeFixes} disabled={!!applyingFixId || isBatching} className="flex items-center px-4 py-2 bg-emerald-600/80 text-white font-semibold rounded-md hover:bg-emerald-600 disabled:bg-emerald-800/50 disabled:cursor-not-allowed transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" /></svg>
            Apply All {safeFixesCount} Safe AI Fixes
          </button>
        )}
      </div>
      <div className="space-y-10">
        {orderedCategories.map(category => {
          if (!groupedIssues[category] || groupedIssues[category].length === 0) return null;
          const config = categoryConfig[category];
          return (
            <section key={category}>
              <div className="flex items-center mb-2">
                <config.Icon className={`h-7 w-7 ${config.color}`} />
                <h3 className={`text-2xl font-semibold ml-3 ${config.color}`}>{config.title}</h3>
              </div>
              <p className="text-slate-400 mb-4 ml-10">{config.description}</p>
              <div className="space-y-4">
                {groupedIssues[category].map((issue) => (
                  <IssueCard key={issue.id} issue={issue} onApplyFix={onApplyFix} isApplying={applyingFixId === issue.id} isDisabled={!!applyingFixId || isBatching} isOnline={isOnline} />
                ))}
              </div>
            </section>
          );
        })}
      </div>
    </div>
  );
}
// END ./wp-plugin-bonsai/src/components/ReviewResults.tsx

// START ./wp-plugin-bonsai/src/components/WorkspaceManager.tsx
import React, { useState } from 'react';
import type { Workspace } from '@/types';

interface WorkspaceManagerProps {
    workspaces: Workspace[];
    activeWorkspaceId: string | null;
    onSwitch: (id: string) => void;
    onAdd: () => void;
    onRename: (id: string, newName: string) => void;
    onDelete: (id: string) => void;
}

export function WorkspaceManager({ workspaces, activeWorkspaceId, onSwitch, onAdd, onRename, onDelete }: WorkspaceManagerProps) {
    const [isRenaming, setIsRenaming] = useState(false);
    const [newName, setNewName] = useState('');
    const activeWorkspace = workspaces.find(ws => ws.id === activeWorkspaceId);

    const handleRenameStart = () => {
        if (activeWorkspace) {
            setNewName(activeWorkspace.name);
            setIsRenaming(true);
        }
    };

    const handleRenameSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (activeWorkspaceId && newName.trim()) {
            onRename(activeWorkspaceId, newName.trim());
            setIsRenaming(false);
        }
    };

    if (!activeWorkspace) return null;

    return (
        <div className="flex items-center gap-2 bg-slate-800 p-1 rounded-lg">
            {isRenaming ? (
                <form onSubmit={handleRenameSubmit}><input type="text" value={newName} onChange={(e) => setNewName(e.target.value)} onBlur={() => setIsRenaming(false)} autoFocus className="bg-slate-700 text-white px-2 py-1 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" /></form>
            ) : (
                <select value={activeWorkspaceId || ''} onChange={(e) => onSwitch(e.target.value)} className="bg-slate-700/50 border border-transparent text-white text-sm font-semibold rounded-md focus:ring-indigo-500 focus:border-indigo-500 block pl-3 pr-8 py-1.5 appearance-none">
                    {workspaces.map(ws => <option key={ws.id} value={ws.id}>{ws.name}</option>)}
                </select>
            )}
             <button onClick={onAdd} title="New Workspace" className="p-1.5 text-slate-400 hover:text-white hover:bg-slate-700 rounded-md"><svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M12 4v16m8-8H4" /></svg></button>
            <div className="relative group">
                <button title="Workspace Actions" className="p-1.5 text-slate-400 hover:text-white hover:bg-slate-700 rounded-md"><svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" /></svg></button>
                <div className="absolute right-0 top-full mt-2 w-48 bg-slate-800 border border-slate-700 rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none group-hover:pointer-events-auto z-30">
                    <button onClick={handleRenameStart} className="block w-full text-left px-4 py-2 text-sm text-slate-300 hover:bg-slate-700">Rename...</button>
                    <button onClick={() => onDelete(activeWorkspaceId!)} disabled={workspaces.length <= 1} className="block w-full text-left px-4 py-2 text-sm text-red-400 hover:bg-slate-700 disabled:text-slate-500 disabled:cursor-not-allowed">Delete</button>
                </div>
            </div>
        </div>
    );
}
// END ./wp-plugin-bonsai/src/components/WorkspaceManager.tsx

// START ./wp-plugin-bonsai/src/components/icons/CategoryIcons.tsx
type IconProps = { className?: string };

export const SecurityIcon = ({ className = 'h-6 w-6' }: IconProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
  </svg>
);

export const PerformanceIcon = ({ className = 'h-6 w-6' }: IconProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" />
  </svg>
);

export const BestPracticesIcon = ({ className = 'h-6 w-6' }: IconProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

export const InteroperabilityIcon = ({ className = 'h-6 w-6' }: IconProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M8.684 13.342C8.886 12.938 9 12.482 9 12s-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.368a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
  </svg>
);

export const CodeQualityIcon = ({ className = 'h-6 w-6' }: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
    </svg>
);
// END ./wp-plugin-bonsai/src/components/icons/CategoryIcons.tsx

// START ./wp-plugin-bonsai/src/components/icons/FileIcons.tsx
import React from 'react';

export const getFileIcon = (fileName: string): React.ReactNode => {
    const extension = fileName.split('.').pop()?.toLowerCase();
    switch (extension) {
        case 'php':
            return <PHPIcon />;
        case 'js':
            return <JSIcon />;
        case 'css':
            return <CSSIcon />;
        case 'json':
            return <JSONIcon />;
        case 'txt':
        case 'md':
            return <TextIcon />;
        default:
            return <DefaultIcon />;
    }
};

const PHPIcon = () => <span className="mr-2 text-indigo-400 font-bold text-xs flex-shrink-0">PHP</span>;
const JSIcon = () => <span className="mr-2 text-yellow-400 font-bold text-xs flex-shrink-0">JS</span>;
const CSSIcon = () => <span className="mr-2 text-sky-400 font-bold text-xs flex-shrink-0">CSS</span>;
const JSONIcon = () => <span className="mr-2 text-emerald-400 font-bold text-xs flex-shrink-0">JSON</span>;
const TextIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-slate-500 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>;
const DefaultIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-slate-500 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" /></svg>;
// END ./wp-plugin-bonsai/src/components/icons/FileIcons.tsx

// START ./wp-plugin-bonsai/src/components/icons/SeverityIcons.tsx
type IconProps = { className?: string };

export const CriticalIcon = ({ className = 'h-5 w-5' }: IconProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
  </svg>
);

export const WarningIcon = ({ className = 'h-5 w-5' }: IconProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

export const InfoIcon = ({ className = 'h-5 w-5' }: IconProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);
// END ./wp-plugin-bonsai/src/components/icons/SeverityIcons.tsx

// START ./wp-plugin-bonsai/src/config/models.ts
import { AIModel } from '@/types';

export const models: AIModel[] = [
  {
    id: 'gemini-2.5-flash',
    name: 'Gemini 2.5 Flash',
    provider: 'Google',
    modelName: 'gemini-2.5-flash',
  },
  {
    id: 'claude-3.5-sonnet',
    name: 'Claude 3.5 Sonnet',
    provider: 'Anthropic',
    modelName: 'claude-3-5-sonnet-20240620',
  },
  {
    id: 'gpt-4o',
    name: 'OpenAI GPT-4o',
    provider: 'OpenAI',
    modelName: 'gpt-4o',
  },
  {
    id: 'codex',
    name: 'OpenAI Codex (GPT-4o)',
    provider: 'OpenAI',
    modelName: 'gpt-4o',
  },
];
// END ./wp-plugin-bonsai/src/config/models.ts

// START ./wp-plugin-bonsai/src/config/schemas.ts
export const reviewSchema = {
  type: 'object',
  properties: {
    review: {
      type: 'array',
      description: "A list of issues found.",
      items: {
        type: 'object',
        properties: {
          pluginName: { type: 'string' },
          fileName: { type: 'string' },
          category: { type: 'string' },
          severity: { type: 'string' },
          description: { type: 'string' },
          impact: { type: 'string', description: "A simple, one-sentence explanation of the real-world impact for a non-technical user." },
          suggestion: { type: 'string' },
        },
        required: ["pluginName", "fileName", "category", "severity", "description", "impact", "suggestion"],
      },
    },
  },
  required: ["review"],
};

export const fixSchema = {
    type: 'object',
    properties: {
        pluginName: { type: 'string' },
        fileName: { type: 'string' },
        changes: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: { type: 'string', description: "Type: 'REPLACE_BLOCK', 'INSERT_BEFORE', 'INSERT_AFTER', 'DELETE_BLOCK'." },
                    startLine: { type: 'number' },
                    endLine: { type: 'number' },
                    content: { type: 'string' },
                },
                required: ['type', 'startLine'],
            },
        },
    },
    required: ['pluginName', 'fileName', 'changes'],
};

export const generateFileSchema = {
    type: 'object',
    properties: {
        fileName: { type: 'string' },
        code: { type: 'string' },
    },
    required: ['fileName', 'code'],
};

export const blueprintSchema = {
    type: 'object',
    properties: {
        fileStructure: { type: 'string', description: "A text-based schematic of the proposed file and directory structure." },
        plan: { type: 'string', description: "A detailed description of the plugin's architecture and key functions." },
    },
    required: ['fileStructure', 'plan'],
};

export const integrationAppSchema = {
    type: 'object',
    properties: {
        workspaceScript: { type: 'object', properties: { fileName: { type: 'string' }, code: { type: 'string' }}},
        manifestFile: { type: 'object', properties: { fileName: { type: 'string' }, code: { type: 'string' }}},
        wordpressCode: { type: 'array', items: { type: 'object', properties: { fileName: { type: 'string' }, code: { type: 'string' }, language: { type: 'string' } }, required: ["fileName", "code", "language"]}},
        instructions: { type: 'string', description: "Unified, step-by-step instructions for a total novice on how to set up BOTH platforms. Use markdown." }
    },
    required: ["instructions"],
};

export const pluginBuildSchema = {
  type: 'object',
  properties: {
    pluginName: { type: 'string', description: 'The main slug-like name for the plugin, e.g., "quote-of-the-day".' },
    files: {
      type: 'array',
      items: { type: 'object', properties: { fileName: { type: 'string' }, code: { type: 'string' } }, required: ['fileName', 'code'] },
    },
  },
  required: ['pluginName', 'files'],
};
// END ./wp-plugin-bonsai/src/config/schemas.ts

// START ./wp-plugin-bonsai/src/data/wordpress.ts
// A subset of deprecated WordPress functions for demonstration.
export const deprecatedWordPressFunctions = new Set([
  'add_contextual_help', 'add_option_whitelist', 'the_attachment_links',
  'get_the_attachment_links', 'get_link', 'link_pages', 'wp_get_links',
  'wp_get_linksbyname', 'wp_list_bookmarks', 'get_bookmarks', 'wp_get_post_cats',
  'wp_set_post_cats', 'is_taxonomy_hierarchical', 'is_term', 'user_pass_ok',
  'get_user_by_email', 'get_user_by_login', 'get_users_of_blog', 'wp_get_profile',
  'get_profile', 'get_others_unpublished_posts', 'get_others_drafts',
  'wp_set_post_tags', 'wp_get_post_tags', 'get_all_category_ids',
  '__ngettext_noop', 'like_escape', 'wp_specialchars', 'register_sidebar_widget',
  'unregister_sidebar_widget', 'register_widget_control', 'unregister_widget_control',
]);
// END ./wp-plugin-bonsai/src/data/wordpress.ts

// START ./wp-plugin-bonsai/src/hooks/useOnlineStatus.ts
import { useState, useEffect } from 'react';

export function useOnlineStatus(): boolean {
  const [isOnline, setIsOnline] = useState(navigator.onLine);

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);
  return isOnline;
}
// END ./wp-plugin-bonsai/src/hooks/useOnlineStatus.ts

/* START ./wp-plugin-bonsai/src/index.css */
/* Global styles for WP Plugin Bonsai */
html, body, #root {
  height: 100%;
}

body {
  background-color: #0f172a; /* slate-900 */
  color: #e2e8f0; /* slate-200 */
}
/* END ./wp-plugin-bonsai/src/index.css */

// START ./wp-plugin-bonsai/src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
// END ./wp-plugin-bonsai/src/index.tsx

// START ./wp-plugin-bonsai/src/services/aiService.ts
import { models } from '@/config/models';
// Fix: Imported ChatMessage and ProviderStatus from the centralized types file.
import type { Plugin, ReviewIssue, AIModel, Provider, IntegrationResponse, FileModificationPlan, PluginBuildResponse, GeneratedFileResponse, BlueprintResponse, ChatMessage, ProviderStatus } from '@/types';
import * as geminiService from '@/services/geminiService';
import * as openaiService from '@/services/openaiService';
import * as anthropicService from '@/services/anthropicService';
import { LocalPackageAnalysis } from '@/services/localPluginPackager';

// Fix: Updated function signatures for conversational AI and build processes.
type ReviewFunction = (plugins: Plugin[], modelName: string) => Promise<ReviewIssue[]>;
type FixFunction = (plugins: Plugin[], issue: ReviewIssue, modelName: string) => Promise<FileModificationPlan>;
type ChatFunction = (messages: ChatMessage[], modelName: string) => Promise<string>;
type IntegrationFunction = (prompt: string, modelName: string) => Promise<IntegrationResponse>;
type GenerateFileFunction = (plugin: Plugin, fileDescription: string, modelName: string) => Promise<GeneratedFileResponse>;
type BlueprintFunction = (messages: ChatMessage[], modelName: string) => Promise<BlueprintResponse>;
type PluginBuildFunction = (messages: ChatMessage[], inputFile: { name: string, content: string } | null, modelName: string) => Promise<PluginBuildResponse>;
type PluginPackageFunction = (files: {name: string, content: string}[], analysis: LocalPackageAnalysis, modelName: string) => Promise<PluginBuildResponse>;


const reviewRunners: Record<Provider, ReviewFunction> = { 'Google': geminiService.runGeminiReview, 'OpenAI': openaiService.runOpenAIReview, 'Anthropic': anthropicService.runAnthropicReview };
const fixRunners: Record<Provider, FixFunction> = { 'Google': geminiService.runGeminiFix, 'OpenAI': openaiService.runOpenAIFix, 'Anthropic': anthropicService.runAnthropicFix };
// Fix: Added chatRunners to handle conversational AI requests.
const chatRunners: Record<Provider, ChatFunction> = { 'Google': geminiService.runGeminiChat, 'OpenAI': openaiService.runOpenAIChat, 'Anthropic': anthropicService.runAnthropicChat };
const integrationRunners: Record<Provider, IntegrationFunction> = { 'Google': geminiService.runGeminiIntegration, 'OpenAI': openaiService.runOpenAIIntegration, 'Anthropic': anthropicService.runAnthropicIntegration };
const generateFileRunners: Record<Provider, GenerateFileFunction> = { 'Google': geminiService.runGeminiGenerateFile, 'OpenAI': openaiService.runOpenAIGenerateFile, 'Anthropic': anthropicService.runAnthropicGenerateFile };
const blueprintRunners: Record<Provider, BlueprintFunction> = { 'Google': geminiService.runGeminiBlueprint, 'OpenAI': openaiService.runOpenAIBlueprint, 'Anthropic': anthropicService.runAnthropicBlueprint };
const pluginBuildRunners: Record<Provider, PluginBuildFunction> = { 'Google': geminiService.runGeminiPluginBuild, 'OpenAI': openaiService.runOpenAIPluginBuild, 'Anthropic': anthropicService.runAnthropicPluginBuild };
const pluginPackageRunners: Record<Provider, PluginPackageFunction> = { 'Google': geminiService.runGeminiPluginPackage, 'OpenAI': openaiService.runOpenAIPluginPackage, 'Anthropic': anthropicService.runAnthropicPluginPackage };


async function executeWithFailover<T extends any[], R>(
    runners: Record<Provider, (...args: [...T, string]) => Promise<R>>,
    initialModelId: string,
    // Fix: Added providerStatus to enable dynamic model selection based on active providers.
    providerStatus: ProviderStatus,
    onFailover: (message: string) => void,
    ...args: T
): Promise<R> {
    const initialModel = models.find(m => m.id === initialModelId);
    if (!initialModel) throw new Error(`Model with ID ${initialModelId} not found.`);

    // Start with the selected model if its provider is enabled, then add others that are enabled
    const modelQueue: AIModel[] = [];
    if (providerStatus[initialModel.provider]) {
        modelQueue.push(initialModel);
    }
    modelQueue.push(...models.filter(m => m.id !== initialModelId && providerStatus[m.provider]));

    if (modelQueue.length === 0) {
        throw new Error("No AI providers are enabled. Please enable one in 'Manage Keys'.");
    }
    
    let lastError: Error | null = null;

    for (const model of modelQueue) {
        // This check is slightly redundant due to queue creation logic, but it's a good safeguard.
        if (!providerStatus[model.provider]) {
            onFailover(`${model.name}'s provider (${model.provider}) is disabled. Skipping.`);
            continue;
        }

        const runner = runners[model.provider];
        if (!runner) { onFailover(`No runner for ${model.provider}. Skipping.`); continue; }
        try {
            return await (runner as any)(...args, model.modelName);
        } catch (error: any) {
            lastError = error;
            const errorMessage = error.message?.toLowerCase() || '';

            // Critical errors that should stop the process immediately
            if (errorMessage.includes('api key is invalid')) {
                throw error; // Re-throw the specific error to be displayed to the user
            }
            if (errorMessage.includes('network error')) {
                // A network error on the client is likely to affect all providers.
                throw new Error("A network error occurred. Please check your connection and try again.");
            }
            
            // Service-specific, transient errors that should allow failover
            if (errorMessage.includes('rate limit exceeded')) {
                onFailover(`${model.name} quota exceeded. Trying next model...`);
                continue; 
            }
            
            // For other generic API errors, we also try to failover.
            onFailover(`An error occurred with ${model.name}. Trying next model...`);
            continue;
        }
    }
    throw lastError || new Error("All available and enabled AI models failed.");
}

// Fix: Updated all exported functions to accept and pass the providerStatus object.
export const runReview = (p: Plugin[], id: string, ps: ProviderStatus, fn: (m: string) => void) => executeWithFailover(reviewRunners, id, ps, fn, p);
export const getModificationPlan = (p: Plugin[], i: ReviewIssue, id: string, ps: ProviderStatus, fn: (m: string) => void) => executeWithFailover(fixRunners, id, ps, fn, p, i);
export const continuePluginChat = (m: ChatMessage[], id: string, ps: ProviderStatus, fn: (m: string) => void) => executeWithFailover(chatRunners, id, ps, fn, m);
export const generateIntegration = (p: string, id: string, ps: ProviderStatus, fn: (m: string) => void) => executeWithFailover(integrationRunners, id, ps, fn, p);
export const generateSingleFile = (p: Plugin, d: string, id: string, ps: ProviderStatus, fn: (m: string) => void) => executeWithFailover(generateFileRunners, id, ps, fn, p, d);
export const generateBlueprint = (m: ChatMessage[], id: string, ps: ProviderStatus, fn: (m: string) => void) => executeWithFailover(blueprintRunners, id, ps, fn, m);
export const buildPlugin = (m: ChatMessage[], f: { name: string, content: string } | null, id: string, ps: ProviderStatus, fn: (m: string) => void) => executeWithFailover(pluginBuildRunners, id, ps, fn, m, f);
export const packagePlugin = (f: {name: string, content: string}[], a: LocalPackageAnalysis, id: string, ps: ProviderStatus, fn: (m: string) => void) => executeWithFailover(pluginPackageRunners, id, ps, fn, f, a);
// END ./wp-plugin-bonsai/src/services/aiService.ts

// START ./wp-plugin-bonsai/src/services/anthropicService.ts
import Anthropic from '@anthropic-ai/sdk';
import type { Plugin, ReviewIssue, IntegrationResponse, FileModificationPlan, PluginBuildResponse, GeneratedFileResponse, BlueprintResponse, ChatMessage } from '@/types';
import * as schemas from '@/config/schemas';
import * as prompts from '@/services/prompts';
import { LocalPackageAnalysis } from '@/services/localPluginPackager';

const getAiInstance = () => {
    const ANTHROPIC_API_KEY = process.env.VITE_ANTHROPIC_API_KEY;
    if (!ANTHROPIC_API_KEY) return null;
    return new Anthropic({ apiKey: ANTHROPIC_API_KEY });
}

const handleAnthropicError = (error: any, provider: string = 'Anthropic') => {
    if (error instanceof Anthropic.AuthenticationError) {
        throw new Error(`[${provider}] API key is invalid.`);
    }
    if (error instanceof Anthropic.RateLimitError) {
        throw new Error(`[${provider}] Rate limit exceeded.`);
    }
    if (error instanceof Anthropic.APIConnectionError) {
        throw new Error(`[${provider}] Network error.`);
    }
     if (error instanceof SyntaxError) {
        throw new Error(`[${provider}] API returned invalid JSON.`);
    }
    throw new Error(`[${provider}] API Error: ${error.message}`);
};

async function callAnthropicTool<T>(modelName: string, messages: Anthropic.Messages.MessageParam[], schema: any, toolName: string): Promise<T> {
    const anthropic = getAiInstance();
    if (!anthropic) throw new Error("[Anthropic] API key not configured. Please add VITE_ANTHROPIC_API_KEY to your .env file.");
    
    try {
        const response = await anthropic.messages.create({
            model: modelName,
            max_tokens: 4096,
            messages: messages,
            tools: [{ name: toolName, description: `Format the response using this JSON schema.`, input_schema: schema }],
            tool_choice: { type: 'tool', name: toolName },
        });

        const toolCall = response.content.find(block => block.type === 'tool_use');
        if (toolCall && 'input' in toolCall) return toolCall.input as T;

        const textBlock = response.content.find(block => block.type === 'text');
        if (textBlock && 'text' in textBlock) {
            // Anthropic sometimes wraps the JSON in markdown, so we strip it.
            const jsonText = textBlock.text.replace(/```json\n?/, '').replace(/```$/, '');
            return JSON.parse(jsonText) as T;
        }
        
        throw new Error("Anthropic returned an unexpected response format.");
    } catch (e) {
        handleAnthropicError(e);
        throw e; // Re-throw after handling
    }
}

export const runAnthropicChat = async (messages: ChatMessage[], modelName: string): Promise<string> => {
    const anthropic = getAiInstance();
    if (!anthropic) throw new Error("[Anthropic] API key not configured. Please add VITE_ANTHROPIC_API_KEY to your .env file.");

    const anthropicMessages = messages.map(m => ({
        role: (m.role === 'model' ? 'assistant' : m.role) as 'user' | 'assistant',
        content: m.content
    }));

    try {
        const response = await anthropic.messages.create({
            model: modelName,
            max_tokens: 4096,
            system: prompts.getPluginBuilderChatSystemPrompt(),
            messages: anthropicMessages,
        });
        
        const textBlock = response.content.find(block => block.type === 'text');
        if (textBlock && 'text' in textBlock) return textBlock.text;
        return "I'm sorry, I couldn't generate a response.";
    } catch (e) {
        handleAnthropicError(e);
        throw e;
    }
};

export const runAnthropicReview = async (plugins: Plugin[], modelName: string): Promise<ReviewIssue[]> => {
  const result = await callAnthropicTool<{ review: ReviewIssue[] }>(modelName, [{ role: 'user', content: prompts.getReviewPrompt(plugins) }], schemas.reviewSchema, 'format_review');
  return result.review.map(issue => ({ ...issue, source: 'AI Analysis' }));
};

export const runAnthropicFix = async (plugins: Plugin[], issue: ReviewIssue, modelName: string): Promise<FileModificationPlan> => {
  return callAnthropicTool<FileModificationPlan>(modelName, [{ role: 'user', content: prompts.getApplyFixPrompt(plugins, issue) }], schemas.fixSchema, 'format_fix');
};

export const runAnthropicIntegration = async (prompt: string, modelName: string): Promise<IntegrationResponse> => {
  return callAnthropicTool<IntegrationResponse>(modelName, [{ role: 'user', content: prompts.getIntegrationAppPrompt(prompt) }], schemas.integrationAppSchema, 'format_integration');
};

export const runAnthropicGenerateFile = async (plugin: Plugin, fileDescription: string, modelName: string): Promise<GeneratedFileResponse> => {
    return callAnthropicTool<GeneratedFileResponse>(modelName, [{ role: 'user', content: prompts.getGenerateFilePrompt(plugin, fileDescription)}], schemas.generateFileSchema, 'format_file_generation');
};

export const runAnthropicBlueprint = async (messages: ChatMessage[], modelName: string): Promise<BlueprintResponse> => {
    const prompt = prompts.getBlueprintPrompt(messages);
    return callAnthropicTool<BlueprintResponse>(modelName, [{ role: 'user', content: prompt }], schemas.blueprintSchema, 'format_blueprint');
};

export const runAnthropicPluginBuild = async (messages: ChatMessage[], inputFile: { name: string, content: string } | null, modelName: string): Promise<PluginBuildResponse> => {
    const prompt = prompts.getPluginBuildPrompt(messages, inputFile);
    return callAnthropicTool<PluginBuildResponse>(modelName, [{ role: 'user', content: prompt }], schemas.pluginBuildSchema, 'format_plugin_build');
};

export const runAnthropicPluginPackage = async (files: {name: string, content: string}[], analysis: LocalPackageAnalysis, modelName: string): Promise<PluginBuildResponse> => {
  const prompt = prompts.getPluginPackagePrompt(files, analysis);
  return callAnthropicTool<PluginBuildResponse>(modelName, [{ role: 'user', content: prompt }], schemas.pluginBuildSchema, 'format_plugin_package');
};
// END ./wp-plugin-bonsai/src/services/anthropicService.ts

// START ./wp-plugin-bonsai/src/services/geminiService.ts
import { GoogleGenAI, Type, Content } from '@google/genai';
import type { ReviewIssue, Plugin, IntegrationResponse, FileModificationPlan, PluginBuildResponse, GeneratedFileResponse, BlueprintResponse, ChatMessage } from '@/types';
import * as schemas from '@/config/schemas';
import * as prompts from '@/services/prompts';
import { LocalPackageAnalysis } from '@/services/localPluginPackager';

const getAiInstance = () => {
    const apiKey = process.env.VITE_GEMINI_API_KEY;
    if (!apiKey) {
        return null;
    }
    return new GoogleGenAI({ apiKey });
};

const getResponseText = (response: { text?: string }, context: string): string => {
    if (!response.text) {
        throw new Error(`[Gemini] Empty response from ${context}.`);
    }
    return response.text;
};

const convertSchemaForGemini = (schema: any): any => {
    if (!schema || !schema.type) return {};
    if (schema.type === 'object') {
        return {
            type: Type.OBJECT,
            properties: Object.entries(schema.properties).reduce((acc, [key, value]) => {
                acc[key] = convertSchemaForGemini(value);
                return acc;
            }, {} as any),
            required: schema.required,
        };
    }
    if (schema.type === 'array') {
        return {
            type: Type.ARRAY,
            items: schema.items ? convertSchemaForGemini(schema.items) : { type: Type.STRING },
        };
    }
    const geminiType = schema.type.toUpperCase();
    if (Object.values(Type).includes(geminiType as Type)) {
        return { type: geminiType as Type };
    }
    return { type: Type.STRING }; // Fallback for unknown types
};

const GEMINI_API_ERROR_MSG = "[Gemini] API key not configured. Please add VITE_GEMINI_API_KEY to your .env file.";

const handleGeminiError = (error: any, provider: string = 'Gemini') => {
    const message = error.toString().toLowerCase();
    if (message.includes('api key not valid')) {
        throw new Error(`[${provider}] API key is invalid.`);
    }
    if (message.includes('429') || message.includes('rate limit')) {
        throw new Error(`[${provider}] Rate limit exceeded.`);
    }
    if (message.includes('fetch') || message.includes('network')) {
        throw new Error(`[${provider}] Network error.`);
    }
     if (error instanceof SyntaxError) {
        throw new Error(`[${provider}] API returned invalid JSON.`);
    }
    throw new Error(`[${provider}] API Error: ${error.message}`);
};

export const runGeminiReview = async (plugins: Plugin[], modelName: string): Promise<ReviewIssue[]> => {
  const ai = getAiInstance();
  if (!ai) throw new Error(GEMINI_API_ERROR_MSG);
  try {
    const response = await ai.models.generateContent({
        model: modelName,
        contents: [{role: 'user', parts: [{text: prompts.getReviewPrompt(plugins)}] }],
        config: { responseMimeType: "application/json", responseSchema: convertSchemaForGemini(schemas.reviewSchema) },
    });
    const parsedResponse = JSON.parse(getResponseText(response, 'review')) as { review: ReviewIssue[] };
    return parsedResponse.review.map(issue => ({ ...issue, source: 'AI Analysis' }));
  } catch (error) {
      handleGeminiError(error);
      return []; // Should not be reached due to throw
  }
};

export const runGeminiFix = async (plugins: Plugin[], issue: ReviewIssue, modelName: string): Promise<FileModificationPlan> => {
  const ai = getAiInstance();
  if (!ai) throw new Error(GEMINI_API_ERROR_MSG);
  try {
    const response = await ai.models.generateContent({
        model: modelName,
        contents: [{role: 'user', parts: [{text: prompts.getApplyFixPrompt(plugins, issue)}] }],
        config: { responseMimeType: "application/json", responseSchema: convertSchemaForGemini(schemas.fixSchema) },
    });
    return JSON.parse(getResponseText(response, 'fix')) as FileModificationPlan;
  } catch (error) {
      handleGeminiError(error);
      throw error; // Re-throw after handling
  }
};

export const runGeminiChat = async (messages: ChatMessage[], modelName: string): Promise<string> => {
    const ai = getAiInstance();
    if (!ai) throw new Error(GEMINI_API_ERROR_MSG);
    try {
        const contents: Content[] = messages.map(msg => ({
            role: msg.role,
            parts: [{ text: msg.content }],
        }));

        const response = await ai.models.generateContent({
            model: modelName,
            contents: contents,
            config: {
                systemInstruction: { parts: [{ text: prompts.getPluginBuilderChatSystemPrompt() }] },
            }
        });
        return getResponseText(response, 'chat');
    } catch (error) {
        handleGeminiError(error);
        throw error;
    }
};

export const runGeminiIntegration = async (prompt: string, modelName: string): Promise<IntegrationResponse> => {
  const ai = getAiInstance();
  if (!ai) throw new Error(GEMINI_API_ERROR_MSG);
  try {
    const response = await ai.models.generateContent({
        model: modelName,
        contents: [{role: 'user', parts: [{text: prompts.getIntegrationAppPrompt(prompt)}] }],
        config: { responseMimeType: "application/json", responseSchema: convertSchemaForGemini(schemas.integrationAppSchema) },
    });
    return JSON.parse(getResponseText(response, 'integration')) as IntegrationResponse;
  } catch (error) {
    handleGeminiError(error);
    throw error;
  }
};

export const runGeminiGenerateFile = async (plugin: Plugin, fileDescription: string, modelName: string): Promise<GeneratedFileResponse> => {
    const ai = getAiInstance();
    if (!ai) throw new Error(GEMINI_API_ERROR_MSG);
    try {
        const response = await ai.models.generateContent({
            model: modelName,
            contents: [{role: 'user', parts: [{text: prompts.getGenerateFilePrompt(plugin, fileDescription)}] }],
            config: { responseMimeType: "application/json", responseSchema: convertSchemaForGemini(schemas.generateFileSchema) },
        });
        return JSON.parse(getResponseText(response, 'generate file')) as GeneratedFileResponse;
    } catch(error) {
        handleGeminiError(error);
        throw error;
    }
};

export const runGeminiBlueprint = async (messages: ChatMessage[], modelName: string): Promise<BlueprintResponse> => {
    const ai = getAiInstance();
    if (!ai) throw new Error(GEMINI_API_ERROR_MSG);
    try {
        const response = await ai.models.generateContent({
            model: modelName,
            contents: [{role: 'user', parts: [{text: prompts.getBlueprintPrompt(messages)}] }],
            config: { responseMimeType: "application/json", responseSchema: convertSchemaForGemini(schemas.blueprintSchema) },
        });
        return JSON.parse(getResponseText(response, 'blueprint')) as BlueprintResponse;
    } catch(error) {
        handleGeminiError(error);
        throw error;
    }
};

export const runGeminiPluginBuild = async (messages: ChatMessage[], inputFile: { name: string, content: string } | null, modelName: string): Promise<PluginBuildResponse> => {
    const ai = getAiInstance();
    if (!ai) throw new Error(GEMINI_API_ERROR_MSG);
    try {
        const response = await ai.models.generateContent({
            model: modelName,
            contents: [{role: 'user', parts: [{text: prompts.getPluginBuildPrompt(messages, inputFile)}] }],
            config: { responseMimeType: "application/json", responseSchema: convertSchemaForGemini(schemas.pluginBuildSchema) },
        });
        return JSON.parse(getResponseText(response, 'plugin build')) as PluginBuildResponse;
    } catch(error) {
        handleGeminiError(error);
        throw error;
    }
};

export const runGeminiPluginPackage = async (files: {name: string, content: string}[], analysis: LocalPackageAnalysis, modelName: string): Promise<PluginBuildResponse> => {
    const ai = getAiInstance();
    if (!ai) throw new Error(GEMINI_API_ERROR_MSG);
    try {
        const response = await ai.models.generateContent({
            model: modelName,
            contents: [{role: 'user', parts: [{text: prompts.getPluginPackagePrompt(files, analysis)}] }],
            config: { responseMimeType: "application/json", responseSchema: convertSchemaForGemini(schemas.pluginBuildSchema) },
        });
        return JSON.parse(getResponseText(response, 'plugin package')) as PluginBuildResponse;
    } catch(error) {
        handleGeminiError(error);
        throw error;
    }
};
// END ./wp-plugin-bonsai/src/services/geminiService.ts

// START ./wp-plugin-bonsai/src/services/localAnalysisService.ts
import PhpParser from 'php-parser';
import type { Node, Identifier } from 'php-parser';
import type { Plugin, ReviewIssue } from '@/types';
import { IssueCategory, IssueSeverity } from '@/types';
import { deprecatedWordPressFunctions } from '@/data/wordpress';

const parser = new (PhpParser as any)({
  parser: {
    extractDoc: true,
    php7: true,
  },
  lexer: {
    all_tokens: true,
    comment_tokens: true,
  },
});

const checkSyntax = (fileCode: string, fileName: string, pluginName: string): ReviewIssue[] => {
  try {
    parser.parseCode(fileCode, fileName);
    return [];
  } catch (e: any) {
    const error: ReviewIssue = {
      pluginName,
      fileName,
      category: IssueCategory.CodeQuality,
      severity: IssueSeverity.Critical,
      description: `PHP Syntax Error: ${e.message}`,
      impact: 'This is a fatal error that will crash your website.',
      suggestion: `Check the code around line ${e.lineNumber}, column ${e.columnNumber} for mistakes like missing semicolons, incorrect variable names, or mismatched brackets.`,
      source: 'Local Scanner',
    };
    return [error];
  }
};

const checkUnescapedOutput = (fileCode: string, fileName: string, pluginName: string): ReviewIssue[] => {
  const issues: ReviewIssue[] = [];
  const lines = fileCode.split('\n');
  const unescapedRegex = /(echo|print|printf|=>)\s*\$_(GET|POST|REQUEST)\[/i;

  lines.forEach((line, index) => {
    // Avoid flagging legitimate uses like in a nonce check
    if (unescapedRegex.test(line) && !line.includes('wp_verify_nonce')) {
      issues.push({
        pluginName,
        fileName,
        category: IssueCategory.Security,
        severity: IssueSeverity.Critical,
        description: `Potential Cross-Site Scripting (XSS) vulnerability on line ${index + 1}.`,
        impact: 'This could allow an attacker to inject malicious scripts into your website, potentially stealing user data or defacing the site.',
        suggestion: `Always escape output. Sanitize and validate all user input. Use WordPress escaping functions like esc_html(), esc_attr(), or esc_url() on the variable from $_GET or $_POST before echoing it. For example: echo esc_html( $_POST['user_input'] );`,
        source: 'Local Scanner',
      });
    }
  });

  return issues;
};


const checkDeprecatedFunctions = (ast: Node, fileName: string, pluginName: string): ReviewIssue[] => {
  const issues: ReviewIssue[] = [];
  
  function walk(node: Node) {
    if (!node) return;

    if (node.kind === 'call') {
      const callNode = node as any;
      if (callNode.what.kind === 'name') {
        const functionName = (callNode.what as Identifier).name;
        if (deprecatedWordPressFunctions.has(functionName)) {
          issues.push({
            pluginName,
            fileName,
            category: IssueCategory.BestPractices,
            severity: IssueSeverity.Warning,
            description: `Usage of deprecated WordPress function: ${functionName}()`,
            impact: 'Using outdated functions can lead to bugs or break your site in future WordPress versions.',
            suggestion: `Replace ${functionName}() with its modern equivalent. Check the official WordPress developer documentation for the recommended alternative.`,
            source: 'Local Scanner',
          });
        }
      }
    }

    // Traverse children
    for (const key in node) {
        if (Object.prototype.hasOwnProperty.call(node, key)) {
            const child = (node as any)[key];
            if (Array.isArray(child)) {
                child.forEach(walk);
            } else if (child && typeof child === 'object' && child.kind) {
                walk(child);
            }
        }
    }
  }

  walk(ast);
  return issues;
};

export const performLocalAnalysis = (plugins: Plugin[]): ReviewIssue[] => {
  let allIssues: ReviewIssue[] = [];

  for (const plugin of plugins) {
    for (const file of plugin.files) {
      if (file.name.toLowerCase().endsWith('.php')) {
        const syntaxErrors = checkSyntax(file.code, file.name, plugin.name);
        if (syntaxErrors.length > 0) {
          allIssues = [...allIssues, ...syntaxErrors];
          continue; 
        }

        allIssues.push(...checkUnescapedOutput(file.code, file.name, plugin.name));

        try {
            const ast = parser.parseCode(file.code, file.name) as Node;
            allIssues.push(...checkDeprecatedFunctions(ast, file.name, plugin.name));
        } catch(e) {
            console.error(`Parser failed unexpectedly on ${file.name} after syntax check passed.`, e);
        }
      }
    }
  }

  return allIssues;
};
// END ./wp-plugin-bonsai/src/services/localAnalysisService.ts

// START ./wp-plugin-bonsai/src/services/localCodePatcher.ts
import type { CodeChangeInstruction } from '@/types';

class LocalCodePatcher {
    public applyPatch(originalCode: string, changes: CodeChangeInstruction[]): string {
        if (!changes || changes.length === 0) return originalCode;
        const lines = originalCode.split('\n');
        const sortedChanges = [...changes].sort((a, b) => b.startLine - a.startLine);

        for (const change of sortedChanges) {
            const startIndex = change.startLine - 1;
            switch (change.type) {
                case 'REPLACE_BLOCK': {
                    const endIndex = change.endLine - 1;
                    if (startIndex < 0 || endIndex >= lines.length || startIndex > endIndex) continue;
                    lines.splice(startIndex, endIndex - startIndex + 1, change.content);
                    break;
                }
                case 'INSERT_BEFORE': {
                    if (startIndex < 0 || startIndex > lines.length) continue;
                    lines.splice(startIndex, 0, change.content);
                    break;
                }
                case 'INSERT_AFTER': {
                    if (startIndex < 0 || startIndex >= lines.length) continue;
                    lines.splice(startIndex + 1, 0, change.content);
                    break;
                }
                case 'DELETE_BLOCK': {
                    const endIndex = change.endLine - 1;
                    if (startIndex < 0 || endIndex >= lines.length || startIndex > endIndex) continue;
                    lines.splice(startIndex, endIndex - startIndex + 1);
                    break;
                }
            }
        }
        return lines.join('\n');
    }
}

export const localCodePatcher = new LocalCodePatcher();
// END ./wp-plugin-bonsai/src/services/localCodePatcher.ts

// START ./wp-plugin-bonsai/src/services/localPluginPackager.ts
import { UploadedFile } from '@/types';

export interface PluginHeaderData {
    pluginName?: string;
    version?: string;
    author?: string;
}

export interface LocalPackageAnalysis {
    hasMainFile: boolean;
    mainFileName: string | null;
    hasReadme: boolean;
    hasUninstall: boolean;
    headerData: PluginHeaderData;
    fileTypes: {
        php: number;
        js: number;
        css: number;
        pot: number;
        other: number;
    };
}

const parsePluginHeader = (fileContent: string): PluginHeaderData => {
    const header: PluginHeaderData = {};
    const lines = fileContent.substring(0, 2000).split('\n'); // Only check the top of the file
    
    const headerFields: { key: keyof PluginHeaderData, regex: RegExp }[] = [
        { key: 'pluginName', regex: /^\s*\*\s*Plugin Name:\s*(.*)/i },
        { key: 'version', regex: /^\s*\*\s*Version:\s*(.*)/i },
        { key: 'author', regex: /^\s*\*\s*Author:\s*(.*)/i },
    ];

    for (const line of lines) {
        for (const field of headerFields) {
            const match = line.match(field.regex);
            if (match) {
                header[field.key] = match[1].trim();
            }
        }
    }
    return header;
};

export const analyzePackageContents = (files: UploadedFile[]): LocalPackageAnalysis => {
    const analysis: LocalPackageAnalysis = {
        hasMainFile: false,
        mainFileName: null,
        hasReadme: false,
        hasUninstall: false,
        headerData: {},
        fileTypes: { php: 0, js: 0, css: 0, pot: 0, other: 0 },
    };

    for (const file of files) {
        const lowerCaseName = file.name.toLowerCase();
        
        if (lowerCaseName.endsWith('.php')) {
            analysis.fileTypes.php++;
            const headerData = parsePluginHeader(file.content);
            if (headerData.pluginName) {
                analysis.hasMainFile = true;
                analysis.mainFileName = file.name;
                analysis.headerData = headerData;
            }
        } else if (lowerCaseName.endsWith('.js')) {
            analysis.fileTypes.js++;
        } else if (lowerCaseName.endsWith('.css')) {
            analysis.fileTypes.css++;
        } else if (lowerCaseName.endsWith('.pot')) {
            analysis.fileTypes.pot++;
        } else {
            analysis.fileTypes.other++;
        }
        
        if (lowerCaseName === 'readme.txt') {
            analysis.hasReadme = true;
        }

        if (lowerCaseName === 'uninstall.php') {
            analysis.hasUninstall = true;
        }
    }
    
    return analysis;
};


export const getBoilerplateUninstall = (): { fileName: string; code: string } => {
    const fileName = 'uninstall.php';
    const code = `<?php
/**
 * Fired when the plugin is uninstalled.
 *
 * @package   My_Custom_Plugin
 */

// If uninstall not called from WordPress, then exit.
if ( ! defined( 'WP_UNINSTALL_PLUGIN' ) ) {
	exit;
}

// TODO: Add cleanup logic here, such as deleting options and custom tables.
// For example:
// delete_option( 'my_plugin_option_name' );
`;
    return { fileName, code };
};
// END ./wp-plugin-bonsai/src/services/localPluginPackager.ts

// START ./wp-plugin-bonsai/src/services/openaiService.ts
import OpenAI from 'openai';
import type { Plugin, ReviewIssue, IntegrationResponse, FileModificationPlan, PluginBuildResponse, GeneratedFileResponse, BlueprintResponse, ChatMessage } from '@/types';
import * as schemas from '@/config/schemas';
import * as prompts from '@/services/prompts';
import { LocalPackageAnalysis } from '@/services/localPluginPackager';

const getAiInstance = () => {
    const OPENAI_API_KEY = process.env.VITE_OPENAI_API_KEY;
    if (!OPENAI_API_KEY) return null;
    return new OpenAI({ apiKey: OPENAI_API_KEY, dangerouslyAllowBrowser: true });
}

const handleOpenAIError = (error: any, provider: string = 'OpenAI') => {
    if (error instanceof OpenAI.AuthenticationError) {
        throw new Error(`[${provider}] API key is invalid.`);
    }
    if (error instanceof OpenAI.RateLimitError) {
        throw new Error(`[${provider}] Rate limit exceeded.`);
    }
    if (error instanceof OpenAI.APIConnectionError) {
        throw new Error(`[${provider}] Network error.`);
    }
     if (error instanceof SyntaxError) {
        throw new Error(`[${provider}] API returned invalid JSON.`);
    }
    throw new Error(`[${provider}] API Error: ${error.message}`);
};

async function callOpenAIChatAPI<T>(modelName: string, messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[]): Promise<T> {
    const openai = getAiInstance();
    if (!openai) throw new Error("[OpenAI] API key not configured. Please add VITE_OPENAI_API_KEY to your .env file.");
    try {
        const response = await openai.chat.completions.create({ model: modelName, messages, response_format: { type: 'json_object' } });
        const content = response.choices[0]?.message?.content;
        if (!content) throw new Error("OpenAI returned an empty response.");
        return JSON.parse(content) as T;
    } catch (e) {
        handleOpenAIError(e);
        throw e; // Re-throw after handling
    }
}

export const runOpenAIChat = async (messages: ChatMessage[], modelName: string): Promise<string> => {
    const openai = getAiInstance();
    if (!openai) throw new Error("[OpenAI] API key not configured. Please add VITE_OPENAI_API_KEY to your .env file.");

    const openAiMessages = messages.map(m => ({
        ...m,
        role: m.role === 'model' ? 'assistant' : m.role,
    })) as OpenAI.Chat.Completions.ChatCompletionAssistantMessageParam[];

    try {
        const response = await openai.chat.completions.create({
            model: modelName,
            messages: [
                { role: 'system', content: prompts.getPluginBuilderChatSystemPrompt() },
                ...openAiMessages
            ],
        });
        return response.choices[0]?.message?.content || "I'm sorry, I couldn't generate a response.";
    } catch(e) {
        handleOpenAIError(e);
        throw e;
    }
};

export const runOpenAIReview = async (plugins: Plugin[], modelName: string): Promise<ReviewIssue[]> => {
  const result = await callOpenAIChatAPI<{ review: ReviewIssue[] }>(modelName, [
    { role: 'system', content: `You MUST respond with a JSON object that strictly adheres to the following JSON schema: ${JSON.stringify(schemas.reviewSchema)}` },
    { role: 'user', content: prompts.getReviewPrompt(plugins) }
  ]);
  return result.review.map(issue => ({ ...issue, source: 'AI Analysis' }));
};

export const runOpenAIFix = async (plugins: Plugin[], issue: ReviewIssue, modelName: string): Promise<FileModificationPlan> => {
  return callOpenAIChatAPI<FileModificationPlan>(modelName, [
    { role: 'system', content: `You MUST respond with a JSON object that strictly adheres to the following JSON schema: ${JSON.stringify(schemas.fixSchema)}` },
    { role: 'user', content: prompts.getApplyFixPrompt(plugins, issue) }
  ]);
};

export const runOpenAIIntegration = async (prompt: string, modelName: string): Promise<IntegrationResponse> => {
  return callOpenAIChatAPI<IntegrationResponse>(modelName, [
    { role: 'system', content: `You MUST respond with a JSON object that strictly adheres to the following JSON schema: ${JSON.stringify(schemas.integrationAppSchema)}` },
    { role: 'user', content: prompts.getIntegrationAppPrompt(prompt) }
  ]);
};

export const runOpenAIGenerateFile = async (plugin: Plugin, fileDescription: string, modelName: string): Promise<GeneratedFileResponse> => {
    return callOpenAIChatAPI<GeneratedFileResponse>(modelName, [
        { role: 'system', content: `You MUST respond with a JSON object that strictly adheres to the following JSON schema: ${JSON.stringify(schemas.generateFileSchema)}` },
        { role: 'user', content: prompts.getGenerateFilePrompt(plugin, fileDescription) }
    ]);
};

export const runOpenAIBlueprint = async (messages: ChatMessage[], modelName: string): Promise<BlueprintResponse> => {
    return callOpenAIChatAPI<BlueprintResponse>(modelName, [
        { role: 'system', content: `You MUST respond with a JSON object that strictly adheres to the following JSON schema: ${JSON.stringify(schemas.blueprintSchema)}` },
        { role: 'user', content: prompts.getBlueprintPrompt(messages) }
    ]);
};

export const runOpenAIPluginBuild = async (messages: ChatMessage[], inputFile: { name: string, content: string } | null, modelName: string): Promise<PluginBuildResponse> => {
  return callOpenAIChatAPI<PluginBuildResponse>(modelName, [
    { role: 'system', content: `You MUST respond with a JSON object that strictly adheres to the following JSON schema: ${JSON.stringify(schemas.pluginBuildSchema)}` },
    { role: 'user', content: prompts.getPluginBuildPrompt(messages, inputFile) }
  ]);
};

export const runOpenAIPluginPackage = async (files: {name: string, content: string}[], analysis: LocalPackageAnalysis, modelName: string): Promise<PluginBuildResponse> => {
  return callOpenAIChatAPI<PluginBuildResponse>(modelName, [
    { role: 'system', content: `You MUST respond with a JSON object that strictly adheres to the following JSON schema: ${JSON.stringify(schemas.pluginBuildSchema)}` },
    { role: 'user', content: prompts.getPluginPackagePrompt(files, analysis) }
  ]);
};
// END ./wp-plugin-bonsai/src/services/openaiService.ts

// START ./wp-plugin-bonsai/src/services/prompts.ts
import type { Plugin, ReviewIssue, ChatMessage } from '@/types';
import { LocalPackageAnalysis } from '@/services/localPluginPackager';

const formatPluginsForPrompt = (plugins: Plugin[]): string => {
  return plugins
    .filter(p => p.files.some(f => f.code.trim()))
    .map(p => `--- PLUGIN NAME: "${p.name}" ---\n` + p.files.filter(f => f.code.trim()).map(f => `--- FILE NAME: "${f.name}" ---\n${f.code}\n--- END FILE: "${f.name}" ---`).join('\n') + `\n--- END PLUGIN: "${p.name}" ---`).join('\n');
};

const formatRawFilesForPrompt = (files: {name: string, content: string}[]): string => {
    return files.map(f => `--- FILE NAME: "${f.name}" ---\n${f.content}\n--- END FILE: "${f.name}" ---`).join('\n');
}

const formatMessagesForPrompt = (messages: ChatMessage[]): string => {
    return messages.map(m => `${m.role === 'user' ? 'User' : 'AI'}: ${m.content}`).join('\n');
};

export const getPluginBuilderChatSystemPrompt = (): string => {
    return "You are a friendly and expert WordPress plugin architect. Your job is to help the user flesh out their idea for a plugin by having a conversation. Ask clarifying questions about features, admin pages, shortcodes, etc. to guide them towards a well-defined plan. Keep your responses concise and conversational.";
};

export const getReviewPrompt = (plugins: Plugin[]): string => {
  return `You are an expert WordPress security analyst. A local scanner has already checked for basic syntax errors. Focus on complex issues. Perform a comprehensive review of the provided WordPress plugins. Analyze for Security, Code Quality, Interoperability, Performance, and Best Practices. For each issue, provide a simple 'impact' statement for a non-technical user. Here are the plugins and their files: ${formatPluginsForPrompt(plugins)}.`;
};

export const getApplyFixPrompt = (plugins: Plugin[], issue: ReviewIssue): string => {
  return `You are an expert automated code correction tool. Your task is to generate a JSON object describing the exact changes to fix an issue. Do not return full code. Return a 'FileModificationPlan' JSON. --- CONTEXT --- ${formatPluginsForPrompt(plugins)} --- ISSUE TO FIX --- Plugin: "${issue.pluginName}", File: "${issue.fileName}", Description: ${issue.description}, Suggestion: ${issue.suggestion} --- END --- Now, provide the JSON object with the precise instructions to fix the file.`;
};

export const getGenerateFilePrompt = (plugin: Plugin, fileDescription: string): string => {
    return `You are an expert WordPress developer. Based on the provided plugin's code, generate a new file as described by the user.
    **User Request:** "a ${fileDescription}"
    **Your Task:** Generate the full code for the requested file and a suitable filename for it.
    --- PLUGIN CODE CONTEXT ---
    ${formatPluginsForPrompt([plugin])}
    --- END PLUGIN CODE CONTEXT ---`;
};

export const getBlueprintPrompt = (messages: ChatMessage[]): string => {
    return `You are a WordPress Plugin Architect. Based on the following conversation with a user, create a high-level blueprint for a new plugin.
    **Conversation:**
    ${formatMessagesForPrompt(messages)}
    **Your Task:** Provide a file structure schematic and a detailed plan describing the plugin's architecture and key functions.`;
};

export const getIntegrationAppPrompt = (userRequest: string): string => {
  return `You are an expert full-stack developer specializing in Google Workspace and WordPress integrations. Your user is a novice.
  **User Request:** "${userRequest}"
  **Your Task:** Adhere strictly to the request. Generate a complete solution that may involve both Google Apps Script and WordPress code. You must provide a robust, unified set of step-by-step instructions for a non-developer to implement the entire solution. Do not add any unrequested features.`;
};

export const getPluginBuildPrompt = (messages: ChatMessage[], inputFile: { name: string, content: string } | null): string => {
    const fileContext = inputFile ? `--- USER-PROVIDED STARTING FILE: ${inputFile.name} ---\nThis file was provided by the user as the primary starting point. Build the plugin based on this file and the conversation.\n${inputFile.content}\n--- END FILE ---` : '';
    return `You are a world-class WordPress Plugin Architect. Your task is to build a complete, production-ready WordPress plugin based on a conversation with a user. Adhere strictly to the final plan discussed.
    ${fileContext}
    **Conversation:**
    ${formatMessagesForPrompt(messages)}
    
    **Your Plan:**
    1. Design a logical file structure.
    2. Write all necessary PHP, JS, and CSS files, following WordPress coding standards.
    3. Generate a WordPress.org-compliant 'readme.txt' file.
    4. Generate a secure 'uninstall.php' file.
    **Output:** Return a single JSON object containing the plugin slug and a list of all files with their full code.`;
};

export const getPluginPackagePrompt = (files: {name: string, content: string}[], analysis: LocalPackageAnalysis): string => {
    const analysisReport: string[] = [];
    if (analysis.hasMainFile && analysis.mainFileName) {
        analysisReport.push(`- The main plugin file appears to be '${analysis.mainFileName}'.`);
        if(analysis.headerData.pluginName) analysisReport.push(`- The plugin name is '${analysis.headerData.pluginName}'.`);
    } else {
        analysisReport.push('- CRITICAL: A main plugin file with a standard WordPress header is missing.');
    }

    if (analysis.hasReadme) {
        analysisReport.push('- A readme.txt file was provided.');
    } else {
        analysisReport.push('- A WordPress.org-compliant readme.txt file is missing.');
    }

    if (analysis.hasUninstall) {
        analysisReport.push('- An uninstall.php file was provided.');
    } else {
        analysisReport.push('- A secure uninstall.php file is missing.');
    }
    
    const { php, js, css, pot, other } = analysis.fileTypes;
    if (php || js || css) {
       analysisReport.push(`- File types detected: ${php} PHP, ${js} JS, ${css} CSS, ${pot} POT, ${other} other.`);
    }


    return `You are an expert WordPress developer. You have been given a collection of raw code files. Your task is to organize these files into a coherent, installable WordPress plugin.
    
    **Local Analysis Report:**
    ${analysisReport.join('\n')}

    **Your Task:**
    1.  Based on the analysis, determine a suitable plugin name/slug.
    2.  Organize the provided files, creating a standard WordPress plugin structure (e.g., creating folders like 'js', 'css', 'includes', 'assets').
    3.  If a main plugin file is missing, you MUST create one with a proper header. If it exists, ensure the header is correct.
    4.  If a readme.txt file is missing, you MUST generate one based on the plugin's code. It must be comprehensive and follow WordPress.org standards.
    5.  If an uninstall.php file is missing, you MUST generate a secure, boilerplate version.
    
    **Provided Files:**
    ${formatRawFilesForPrompt(files)}
    
    **Output:** Return a single JSON object containing the plugin slug and a list of all files with their final paths and content.`;
};
// END ./wp-plugin-bonsai/src/services/prompts.ts

// START ./wp-plugin-bonsai/src/services/storageService.ts
import { get, set } from 'idb-keyval';
import type { Workspace, ProviderStatus } from '@/types';

const WORKSPACES_KEY = 'ai-dev-assistant-workspaces-v2';
const PROVIDER_STATUS_KEY = 'ai-dev-assistant-provider-status-v1';

export async function saveWorkspaces(workspaces: Workspace[]): Promise<void> {
    try {
        await set(WORKSPACES_KEY, workspaces);
    } catch (error) {
        console.error("Failed to save workspaces to IndexedDB", error);
    }
}

export async function loadWorkspaces(): Promise<Workspace[]> {
    try {
        const workspaces = await get<Workspace[]>(WORKSPACES_KEY);
        // Basic migration: If old structure is found, clear it.
        if (workspaces && workspaces.length > 0 && !('history' in workspaces[0])) {
            console.log("Old workspace version detected, starting fresh.");
            return [];
        }
        return workspaces || [];
    } catch (error) {
        console.error("Failed to load workspaces from IndexedDB", error);
        return [];
    }
}

// Fix: Add function to save provider status to IndexedDB.
export async function saveProviderStatus(status: ProviderStatus): Promise<void> {
    try {
        await set(PROVIDER_STATUS_KEY, status);
    } catch (error) {
        console.error("Failed to save provider status to IndexedDB", error);
    }
}

// Fix: Add function to load provider status from IndexedDB.
export async function loadProviderStatus(): Promise<ProviderStatus | undefined> {
    try {
        return await get<ProviderStatus>(PROVIDER_STATUS_KEY);
    } catch (error) {
        console.error("Failed to load provider status from IndexedDB", error);
        return undefined;
    }
}
// END ./wp-plugin-bonsai/src/services/storageService.ts

// START ./wp-plugin-bonsai/src/types.ts



export type AppMode = 'wordpress' | 'integration' | 'plugin-builder' | 'file-editor' | 'plugin-packager';
export type Provider = 'Google' | 'OpenAI' | 'Anthropic';

// Fix: Added ProviderStatus type definition to be shared across the application.
export type ProviderStatus = Record<Provider, boolean>;

export interface AIModel {
  id: string;
  name: string;
  provider: Provider;
  modelName: string; 
}

export enum IssueCategory {
  Security = 'Security',
  Performance = 'Performance',
  BestPractices = 'Best Practices',
  Interoperability = 'Interoperability',
  CodeQuality = 'Code Quality',
}

export enum IssueSeverity {
  Critical = 'Critical',
  Warning = 'Warning',
  Info = 'Info',
}

export interface PluginFile {
  id: string;
  name: string;
  code: string;
  modified?: boolean;
}

export interface Plugin {
  id:string;
  name: string;
  zipName: string | null;
  files: PluginFile[];
}

export interface ReviewIssue {
  id?: string;
  pluginName: string;
  fileName: string;
  category: IssueCategory;
  severity: IssueSeverity;
  description: string;
  impact: string;
  suggestion: string;
  source?: 'Local Scanner' | 'AI Analysis';
}

export type ChangeType = 'REPLACE_BLOCK' | 'INSERT_BEFORE' | 'INSERT_AFTER' | 'DELETE_BLOCK';

export interface CodeChangeInstruction {
    type: ChangeType;
    startLine: number;
    endLine: number;
    content: string;
}

export interface FileModificationPlan {
    pluginName: string;
    fileName:string;
    changes: CodeChangeInstruction[];
}

export interface GeneratedFileResponse {
    fileName: string;
    code: string;
}

export interface BlueprintResponse {
    fileStructure: string;
    plan: string;
}

export interface WorkspaceScriptFile {
  fileName: string;
  code: string;
}

export interface WordPressCodeFile {
    fileName: string;
    code: string;
    language: 'php' | 'javascript' | 'css';
}

export interface IntegrationResponse {
  workspaceScript?: WorkspaceScriptFile;
  manifestFile?: WorkspaceScriptFile;
  wordpressCode?: WordPressCodeFile[];
  instructions: string;
}

export interface PluginBuildResponse {
  pluginName: string;
  files: {
    fileName: string;
    code: string;
  }[];
}

export interface Workspace {
  id: string;
  name: string;
  plugins: Plugin[];
  reviewIssues: ReviewIssue[] | null;
  mode: AppMode;
  selectedModelId: string;
  createdAt: string;
  history: Plugin[][]; // Array of plugin states
  historyIndex: number;
}

export interface ConfirmationState {
    message: string;
    onConfirm: () => void;
    onCancel: () => void;
}

// Fix: Added ChatMessage type for conversational AI features.
export interface ChatMessage {
  role: 'user' | 'model';
  content: string;
}

// Fix: Added UploadedFile type for the plugin packager.
export interface UploadedFile {
    name: string;
    content: string;
    path: string;
}
// END ./wp-plugin-bonsai/src/types.ts

// START ./wp-plugin-bonsai/test/localAnalysisService.test.ts
import { describe, it, expect } from 'vitest';
import { performLocalAnalysis } from '../src/services/localAnalysisService';
import { IssueCategory, Plugin } from '../src/types';

function pluginWith(code: string): Plugin {
  return {
    id: 'p1',
    name: 'TestPlugin',
    zipName: null,
    files: [{ id: 'f1', name: 'file.php', code }],
  };
}

describe('performLocalAnalysis', () => {
  it('reports PHP syntax errors', () => {
    const plugin = pluginWith('<?php if (true) { echo "hi";');
    const issues = performLocalAnalysis([plugin]);
    expect(issues.some(i => i.category === IssueCategory.CodeQuality)).toBe(true);
  });

  it('detects unescaped output', () => {
    const plugin = pluginWith('<?php echo $_GET["name"];');
    const issues = performLocalAnalysis([plugin]);
    expect(issues.some(i => i.category === IssueCategory.Security)).toBe(true);
  });

  it('flags deprecated WordPress functions', () => {
    const plugin = pluginWith('<?php add_option_whitelist();');
    const issues = performLocalAnalysis([plugin]);
    expect(issues.some(i => i.category === IssueCategory.BestPractices)).toBe(true);
  });
});
// END ./wp-plugin-bonsai/test/localAnalysisService.test.ts

// START ./wp-plugin-bonsai/test/localCodePatcher.test.ts
import { describe, it, expect } from 'vitest';
import { localCodePatcher } from '../src/services/localCodePatcher';
import type { CodeChangeInstruction } from '../src/types';

describe('localCodePatcher.applyPatch', () => {
  it('applies replace, insert, and delete operations', () => {
    const original = ['one', 'two', 'three'].join('\n');
    const changes: CodeChangeInstruction[] = [
      { type: 'REPLACE_BLOCK', startLine: 2, endLine: 2, content: 'TWO' },
      { type: 'INSERT_BEFORE', startLine: 1, endLine: 1, content: 'zero' },
      { type: 'INSERT_AFTER', startLine: 3, endLine: 3, content: 'four' },
      { type: 'DELETE_BLOCK', startLine: 2, endLine: 2, content: '' }
    ];
    const result = localCodePatcher.applyPatch(original, changes);
    expect(result).toBe(['zero', 'one', 'three', 'four'].join('\n'));
  });

  it('ignores out-of-range instructions', () => {
    const original = ['a', 'b'].join('\n');
    const changes: CodeChangeInstruction[] = [
      { type: 'DELETE_BLOCK', startLine: 10, endLine: 12, content: '' },
      { type: 'INSERT_BEFORE', startLine: -1, endLine: -1, content: 'x' }
    ];
    const result = localCodePatcher.applyPatch(original, changes);
    expect(result).toBe(original);
  });
});
// END ./wp-plugin-bonsai/test/localCodePatcher.test.ts

// START ./wp-plugin-bonsai/tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "esModuleInterop": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
// END ./wp-plugin-bonsai/tsconfig.json

// START ./wp-plugin-bonsai/tsconfig.node.json
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}
// END ./wp-plugin-bonsai/tsconfig.node.json

// START ./wp-plugin-bonsai/vite.config.ts
import { defineConfig, loadEnv } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'
import { fileURLToPath } from 'url';

// __dirname is not available in ES modules by default.
// This correctly derives the directory path from the module's URL.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  // Fix: Replaced process.cwd() with __dirname to resolve a TypeScript type error.
  const env = loadEnv(mode, __dirname, '');
  
  return {
    plugins: [react()],
    resolve: {
      alias: {
        // This alias allows for clean imports like `import Component from '@/components/Component'`
        '@': path.resolve(__dirname, './src'),
      },
    },
    // This `define` block makes .env variables available in your client-side code
    // via the `process.env` object, making them accessible in your services.
    define: {
      'process.env.API_KEY': JSON.stringify(env.VITE_GEMINI_API_KEY),
      'process.env.VITE_OPENAI_API_KEY': JSON.stringify(env.VITE_OPENAI_API_KEY),
      'process.env.VITE_ANTHROPIC_API_KEY': JSON.stringify(env.VITE_ANTHROPIC_API_KEY),
    },
  }
})
// END ./wp-plugin-bonsai/vite.config.ts


// END bonsai-all-files
